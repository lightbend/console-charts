---
# Source: enterprise-suite/templates/alertmanager-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: alertmanager
  name: alertmanager-default
data:
  alertmanager.yml: |
    # Example Lightbend Console Alertmanager config.
  
    global:
  
    # Routing rules.
    route:
      # Default receiver.
      receiver: team1-slack
      # Resend unresolved alerts at this interval.
      repeat_interval: 4h
      # Wait for any other alerts in the same group before sending.
      group_wait: 30s
      # Wait before sending a new alert for a group.
      group_interval: 5m
      # Group alerts by namespace and workload.
      group_by: [namespace, es_workload, severity]
      routes:
      # team1 Slack
      - match:
          es_workload: workload1
          severity: warning
        receiver: team1-slack
  
      # team1 PagerDuty
      - match:
          es_workload: workload1
          severity: critical
        receiver: team1-pagerduty
  
      # team2 PagerDuty
      - match:
          es_workload: workload2
          severity: critical
        receiver: team2-slack
  
    # Don't alert on warnings if the same alert is already critical.
    inhibit_rules:
    - source_match:
        severity: critical
      target_match:
        severity: warning
      equal: [alertname, namespace, es_workload]
  
    templates:
    # Slack notification templates.
    - '/etc/config/slack.tmpl'
  
    # Receivers.
    receivers:
    - name: team1-slack
      slack_configs:
      # Use Slack integrations to find the webhook at https://typesafe.slack.com/apps/A0F7XDUAZ-incoming-webhooks?next_id=0.
      - api_url: https://slack.localhost/services/somewhere
        channel: '#team1-alerts'
        title: '{{ template "title.slack" . }}'
        text: '{{ template "text.slack" . }}'
        send_resolved: true
  
    - name: team1-pagerduty
      pagerduty_configs:
      - routing_key: my_secret_routing_key
        # Remove this in actual usage. It's added to prevent sending PagerDuty alerts from local development environments.
        url: https://pagerduty.localhost/api
  
    - name: team2-slack
      slack_configs:
      # Use Slack integrations to find the webhook at https://typesafe.slack.com/apps/A0F7XDUAZ-incoming-webhooks?next_id=0.
      - api_url: https://slack.localhost/services/somewhere
        channel: '#team2-alerts'
        title: '{{ template "title.slack" . }}'
        text: '{{ template "text.slack" . }}'
        send_resolved: true
  slack.tmpl: |
    {{ define "title.slack" }}{{ .GroupLabels.namespace}}/{{ .GroupLabels.es_workload }} [{{ .Status | toUpper }}][{{ .GroupLabels.severity | toUpper }}]{{ end }}
    {{ define "text.slack" }}{{ range .Alerts }}_{{ .Labels.name }}_
    {{ end }}{{- end -}}
  


---
# Source: enterprise-suite/templates/es-console-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: es-console
data:
  config.js: |
    window.installedConfig = {"logo":""}
  default.conf: |
    server {
      listen 8080;
      server_name localhost;
      set $base /usr/share/nginx/html;
  
      # common security headers
  
      more_clear_headers "Server";
      more_set_headers
        "X-Frame-Options: DENY"
        "X-XSS-Protection: 1";
      set $app_csp "img-src 'self' data:; default-src 'self' 'unsafe-eval' 'unsafe-inline';";
  
      # use external resolver to lookup backends, cache for 30 seconds
  
      resolver 127.0.0.1:5353 ipv6=off valid=30s;
  
      set $prometheus "prometheus-server";
      set $monitorapi "console-api";
      set $grafana "grafana-server";
      set $alertmanager "alertmanager:9093";
  
      # nginx config primer:
      # location ~ (regex.*)(matchers.*) { regex matchers become $1 and $2 in the block }
      #   nginx uses longest path match to decide which location handler to use
      #   the result of a location handler can then match and enter another location handler
      # proxy_pass http://$variable triggers re-resolve mode, otherwise would have fixed IP
      # proxy_redirect 'match' 'replace' fixups for Location header, if any
      #   magic 'replace' value ' $1/' with a space prefix tells nginx to not add server and port
      # sub_filter 'match' 'replace'
      #   rewrites backend content, which we use for inserting the base path
      # proxy_cookie_path 'match' 'replace'
      #   fixes session cookie Path attribute, for Grafana
      # xss guard for injected uris, preserving slash delimiters
      #   array_split '/' $1 to=$encoded_base;
      #   array_map_op set_escape_uri $encoded_base;
      #   array_join '/' $encoded_base;
  
      # proxy_pass backends with dynamic base url
  
      # Location matching strategy:
      # - Explicit location matchers for each route.
      # - Anything not matched by the explicit location matchers is treated as a path prefix (base href), added by
      #   e.g. ingress or apiserver proxy.
      # - Catch all location matcher is last, which captures the path prefix up to the penultimate slash.
  
      sub_filter_once off;
  
      set $nocache 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
  
      # prometheus UI and api endpoints
      location ~ ^(.*/service/prometheus)(/.*)$ {
        # encode base path
        array_split '/' $1 to=$encoded_base;
        array_map_op set_escape_uri $encoded_base;
        array_join '/' $encoded_base;
        # proxy to prometheus
        proxy_pass http://$prometheus$2$is_args$args;
        # rewrite base path in response content, and redirect headers
        sub_filter '="/' '="$encoded_base/';
        sub_filter 'PATH_PREFIX = ""' 'PATH_PREFIX = window.location.pathname.substr(0, window.location.pathname.lastIndexOf("/graph"))';
        proxy_redirect '/' ' $1/';
      }
  
      # console-api
      # es-monitor-api is preserved for backwards compatibility with es-console-spa
      location ~ ^(.*/service/console-api|.*/service/es-monitor-api)(/.*)$ {
        proxy_pass http://$monitorapi$2$is_args$args;
        proxy_redirect '/' ' $1/';
      }
  
      # grafana plugin
      location ~ ^(.*/service/grafana)(/dashboard/script/exporter-async.js)$ {
        # encode base path
        array_split '/' $1 to=$encoded_base;
        array_map_op set_escape_uri $encoded_base;
        array_join '/' $encoded_base;
        # proxy to grafana
        proxy_pass http://$grafana:3000$2$is_args$args;
        # rewrite base path in response content, cookies, and redirect headers
        sub_filter_types *;
        sub_filter '/service/grafana' '$encoded_base';
        proxy_cookie_path '/service/grafana' '$1';
        proxy_redirect '/' ' $1/';
        # no-cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control $nocache;
        if_modified_since off;
        expires off;
        etag off;
      }
  
      # grafana ui
      location ~ ^(.*/service/grafana)(/.*)$ {
        # encode base path
        array_split '/' $1 to=$encoded_base;
        array_map_op set_escape_uri $encoded_base;
        array_join '/' $encoded_base;
        # proxy to grafana
        proxy_pass http://$grafana:3000$2$is_args$args;
        # rewrite base path in response content, cookies, and redirect headers
        sub_filter_types *;
        sub_filter '/service/grafana' '$encoded_base';
        proxy_cookie_path '/service/grafana' '$1';
        proxy_redirect '/' ' $1/';
      }
  
      # alertmanager ui
      location ~ ^(.*/service/alertmanager)(/.*)$ {
        proxy_pass http://$alertmanager$2$is_args$args;
        proxy_redirect '/' ' $1/';
      }
  
      # redirect /service/prometheus -> /service/prometheus/
      # redirect /service/grafana -> /service/grafana/
      # redirect /service/alertmanager -> /service/alertmanager/
  
      location ~ ^(.*/service/(prometheus|grafana|alertmanager))$ {
        return 301 ' $1/';
      }
  
      # version
  
      location ~ ^(.*)/version$ {
        return 200 '{
          "description": "Lightbend Console",
          "version": "1.0.2",
          "alertManagerConfigMap": "alertmanager-default",
          "alertManagerImage": "prom/alertmanager",
          "alertManagerVersion": "v0.16.0",
          "alertManagers": "alertmanager:9093",
          "alertmanagerVolumeSize": "32Gi",
          "alpineImage": "alpine",
          "alpineVersion": "3.8",
          "apiGroupVersion": "rbac.authorization.k8s.io",
          "busyboxImage": "busybox",
          "busyboxVersion": "1.30",
          "configMapReloadImage": "jimmidyson/configmap-reload",
          "configMapReloadVersion": "v0.2.2",
          "consoleUIConfig": "map[logo:]",
          "createAlertManager": "true",
          "daemonSetApiVersion": "apps/v1beta2",
          "defaultCPURequest": "100m",
          "defaultMemoryRequest": "50Mi",
          "deploymentApiVersion": "apps/v1beta2",
          "esConsoleExposePort": "30080",
          "esConsoleImage": "{{ .Values.imageCredentials.registry }}/enterprise-suite/es-console",
          "esConsoleVersion": "v1.0.3",
          "esGrafanaImage": "{{ .Values.imageCredentials.registry }}/enterprise-suite/es-grafana",
          "esGrafanaVersion": "v0.2.1",
          "esGrafanaVolumeSize": "32Gi",
          "esMonitorImage": "{{ .Values.imageCredentials.registry }}/enterprise-suite/console-api",
          "esMonitorVersion": "v1.0.11",
          "exposeServices": "NodePort",
          "goDnsmasqImage": "lightbend-docker-registry.bintray.io/lightbend/go-dnsmasq",
          "goDnsmasqVersion": "v0.1.7-1",
          "imageCredentials": { "registry": "lightbend-docker-commercial-registry.bintray.io" },
          "imagePullPolicy": "IfNotPresent",
          "kubeStateMetricsImage": "gcr.io/google_containers/kube-state-metrics",
          "kubeStateMetricsVersion": "v1.2.0",
          "prometheusDomain": "prometheus.io",
          "prometheusImage": "prom/prometheus",
          "prometheusMemoryRequest": "250Mi",
          "prometheusVersion": "v2.7.1",
          "prometheusVolumeSize": "256Gi",
          "rbacApiVersion": "rbac.authorization.k8s.io/v1",
          "usePersistentVolumes": "true",
          "name": "enterprise-suite"
        }';
        default_type application/json;
      }
  
      # console entry point
  
      location ~ ^(.*/)index.html$ {
        # Console CSP
        add_header Content-Security-Policy $app_csp;
        # encode base path
        array_split '/' $1 to=$encoded_base;
        array_map_op set_escape_uri $encoded_base;
        array_join '/' $encoded_base;
        # serve the app
        alias $base/index.html;
        # replace base href
        sub_filter 'base href="/"' 'base href="$encoded_base"';
        # no-cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control $nocache;
        if_modified_since off;
        expires off;
        etag off;
      }
  
      # bookmarks and reloads in the /workloads/ path
      # (for our single page app, these should reload index.html but keep the path)
  
      location ~ ^(.*/)(namespaces/[^/]+/workloads/.*)$ {
        # Console CSP
        add_header Content-Security-Policy $app_csp;
        # encode base path
        array_split '/' $1 to=$encoded_base;
        array_map_op set_escape_uri $encoded_base;
        array_join '/' $encoded_base;
        # serve the app
        alias $base/index.html;
        default_type text/html;
        # replace base href
        sub_filter 'base href="/"' 'base href="$encoded_base"';
        # no-cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control $nocache;
        if_modified_since off;
        expires off;
        etag off;
      }
  
      # pipelines ui
  
      location ~ ^(.*/)(pipelines/.*)$ {
        # Console CSP
        add_header Content-Security-Policy $app_csp;
        # encode base path
        array_split '/' $1 to=$encoded_base;
        array_map_op set_escape_uri $encoded_base;
        array_join '/' $encoded_base;
        # serve the app
        alias $base/index.html;
        default_type text/html;
        # replace base href
        sub_filter 'base href="/"' 'base href="$encoded_base"';
        # no-cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control $nocache;
        if_modified_since off;
        expires off;
        etag off;
      }
  
      # Specific handler for /assets/js/config.js
      location ~ ^.*/(assets/js/config.js)$ {
        alias /helm-data/$1;
      }
  
      # Specific handler for assets.
      location ~ ^(.*)(/assets/.*)$ {
        alias $base$2;
      }
  
      # Handler for application routes and assets not inside of /assets.
      location ~ ^(.*)(/(cluster|.*\.js|.*\.css|.*\.woff|.*\.woff2|.*\.ttf))$ {
        root $base;
        try_files $2 $1/index.html;
      }
  
      # If there is a path with no trailing slash that hasn't matched any location yet, rewrite to trailing slash.
      # E.g. "http://consoleurl/monitoring" -> "http://consoleurl/monitoring/".
      location ~ ^/.+[^/]$ {
        rewrite ^(/.+[^/])$ $1/ last;
      }
  
      # Catch all handler that catches "http://consoleurl/prefix1/prefix2/", and redirects to
      # "http://consoleurl/prefix1/prefix2/index.html". It handles arbitrary number of prefix subpaths.
      # It does not work with application routes - those need specific location handlers which are listed above.
      location ~ ^(.*)(/.*)$ {
        root $base;
        try_files $2 $1/index.html;
      }
    }
  

---
# Source: enterprise-suite/templates/es-grafana-configmap-datasource.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: grafana-datasource-cm
data:
  prometheus-server-datasource.yaml: |
    # config file version
    apiVersion: 1

    # list of datasources to insert/update depending
    datasources:
      # <string, required> name of the datasource. Required
    - name: Cinnamon Prometheus
      # <string, required> datasource type. Required
      type: prometheus
      # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
      access: proxy
      # <int> org id. will default to orgId 1 if not specified
      orgId: 1
      # <string> url
      url: http://prometheus-server
      #
      basicAuth: false
      #
      isDefault: true
      editable: true

---
# Source: enterprise-suite/templates/es-grafana-configmap-plugin.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: exporter-graphs-cm
data:
  akka-exporter.json: |
    [
      {
        "graphName": "Mailbox Size",
        "promQL": [
          {
            "expr": "max by (actor)(akka_actor_mailbox_size{ContextTags,quantile=\"0.99\"})",
            "legendFormat": "{{actor}} max"
          }
        ]
      },
      {
        "graphName": "Mailbox Time",
        "promQL": [
          {
            "expr": "max by (actor)(akka_actor_mailbox_time_ns{ContextTags,quantile=\"0.99\"})",
            "legendFormat": "{{actor}} max"
          }
        ],
        "yaxes": {
          "format": "ns"
        }
      },
      {
        "graphName": "Actor Failure Rate",
        "promQL": [
          {
            "expr": "sum by (actor) (irate(akka_actor_actor_failure{ContextTags}[1m]))",
            "legendFormat": "{{actor}} sum"
          }
        ]
      },
      {
        "graphName": "Processed Message Rate",
        "promQL": [
          {
            "expr": "sum by (actor)(irate(akka_actor_processed_messages{ContextTags}[1m]))",
            "legendFormat": "{{actor}} sum"
          }
        ],
        "yaxes": {
          "label": "msgs/sec"
        }
      },
      {
        "graphName": "Processing Time",
        "promQL": [
          {
            "expr": "max by (actor)(akka_actor_processing_time_ns{ContextTags,quantile=\"0.99\"})",
            "legendFormat": "{{actor}} max"
          }
        ],
        "yaxes": {
          "format": "ns"
        }
      },
      {
        "graphName": "Sent Message Rate",
        "promQL": [
          {
            "expr": "sum by (actor)(irate(akka_actor_sent_messages{ContextTags}[1m]))",
            "legendFormat": "{{actor}} sum"
          }
        ],
        "yaxes": {
          "label": "msgs/sec"
        }
      },
      {
        "graphName": "Running Actors",
        "promQL": [
          {
            "expr": "sum by (actor)(akka_actor_running_actors{ContextTags})",
            "legendFormat": "{{actor}} sum"
          }
        ],
        "yaxes": {
          "decimals": 0
        }
      },
      {
        "graphName": "Unhandled Message Rate",
        "promQL": [
          {
            "expr": "sum by (actor)(irate(akka_actor_unhandled_message{ContextTags}[1m]))",
            "legendFormat": "{{actor}} sum"
          }
        ]
      },
      {
        "graphName": "Dead Letter Rate",
        "promQL": [
          {
            "expr": "sum by (actor) (rate(akka_actor_dead_letter{ContextTags}[5m]))",
            "legendFormat": "{{actor}} sum"
          }
        ]
      },
      {
        "graphName": "Dispatcher Queue Size",
        "promQL": [
          {
            "expr": "max by (actor_system) (max_over_time(akka_dispatcher_queue_size{ContextTags}[$__interval]))",
            "legendFormat": "{{actor_system}} max"
          }
        ],
        "yaxes": {
          "decimals": 0
        }
      },
      {
        "graphName": "Dispatcher Pool Size",
        "promQL": [
          {
            "expr": "max by (actor_system) (max_over_time(akka_dispatcher_pool_size{ContextTags}[$__interval]))",
            "legendFormat": "{{actor_system}} max"
          }
        ],
        "yaxes": {
          "decimals": 0
        }
      },
      {
        "graphName": "Dispatcher Threads",
        "promQL": [
          {
            "expr": "max by (actor_system) (akka_dispatcher_active_threads{ContextTags})",
            "legendFormat": "{{actor_system}} max"
          },
          {
            "expr": "max by (actor_system) (akka_dispatcher_running_threads{ContextTags})",
            "legendFormat": "{{actor_system}} max"
          }
        ],
        "yaxes": {
          "decimals": 0
        }
      }
    ]
  akka-http-exporter.json: |
    [
      {
        "graphName": "Responses Per Second",
        "promQL": [
          "sum by (request_path)(irate(akka_http_request_path_endpoint_responses{ContextTags}[1m]))"
        ]
      },
      {
        "graphName": "Response Time",
        "promQL": [
          "max by (request_path)(akka_http_request_path_endpoint_response_time_ns{ContextTags,quantile=\"0.99\"})"
        ],
        "yaxes": {
          "format": "ns"
        }
      },
      {
        "graphName": "Connections Per Second",
        "promQL": [
          "sum by (http_server)(irate(akka_http_http_server_connections{ContextTags}[1m]))"
        ]
      },
      {
        "graphName": "Response Time 2XX 99%",
        "promQL": [
          "max by (http_server)(akka_http_http_server_response_time_2xx_ns{ContextTags, quantile=\"0.99\"})"
        ],
        "yaxes": {
          "format": "ns"
        }
      },
      {
        "graphName": "Response Time 4XX 99%",
        "promQL": [
          "max by (http_server)(akka_http_http_server_response_time_4xx_ns{ContextTags, quantile=\"0.99\"})"
        ],
        "yaxes": {
          "format": "ns"
        }
      },
      {
        "graphName": "Response Time 5XX 99%",
        "promQL": [
          "max by (http_server)(akka_http_http_server_response_time_5xx_ns{ContextTags, quantile=\"0.99\"})"
        ],
        "yaxes": {
          "format": "ns"
        }
      }
    ]
  cassandra-exporter.json: |
    [
      {"graphName":"Storage", "promQL":["cassandra_storage_load{ContextTags}"]},
      {"graphName":"Read Latency", "promQL":["cassandra_clientrequest_latency{clientrequest='Read', ContextTags}"]},
      {"graphName":"Write Latency", "promQL":["cassandra_clientrequest_latency{clientrequest='Write', ContextTags}"]},
      {"graphName":"Total Read Latency Per Second", "promQL":["irate(cassandra_clientrequest_totallatency{clientrequest='Read', ContextTags}[1m])"]},
      {"graphName":"Total Write Latency Per Second", "promQL":["irate(cassandra_clientrequest_totallatency{clientrequest='Write', ContextTags}[1m])"]}
    ]
  cluster-exporter.json: |
    [
       {
          "graphName": "CPUs Used",
          "promQL": [
             "sum by (namespace) (rate(container_cpu_system_seconds_total[1m]) + rate(container_cpu_user_seconds_total[1m]))"
          ]
       },
       {
          "graphName": "Memory Used",
          "promQL": [
             "sum by (namespace) (container_memory_usage_bytes)"
          ],
          "yaxes": {
             "format": "bytes"
          }
       },
       {
          "graphName": "File System Used",
          "promQL": [
             "sum by (namespace) (container_fs_usage_bytes)"
          ],
          "yaxes": {
             "format": "bytes"
          }
       },
       {
          "graphName": "Bytes Received Per Second",
          "promQL": [
             "sum by (namespace) (rate(container_network_receive_bytes_total[1m]))"
          ],
          "yaxes": {
             "format": "bytes"
          }
       },
       {
          "graphName": "Bytes Transmitted Per Second",
          "promQL": [
             "sum by (namespace) (rate(container_network_transmit_bytes_total[1m]))"
          ],
          "yaxes": {
             "format": "bytes"
          }
       }
    ]
  jvm-exporter.json: |
    [
      {
        "graphName": "Heap",
        "promQL": [
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_heap_committed{ContextTags})",
            "legendFormat": "committed {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_heap_init{ContextTags})",
            "legendFormat": "init {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_heap_max{ContextTags})",
            "legendFormat": "max {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_heap_used{ContextTags})",
            "legendFormat": "used {{kubernetes_pod_name}}"
          }
        ],
        "yaxes": {
          "format": "bytes"
        }
      },
      {
        "graphName": "Non Heap",
        "promQL": [
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_non_heap_committed{ContextTags})",
            "legendFormat": "commmitted {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_non_heap_init{ContextTags})",
            "legendFormat": "init {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_non_heap_max{ContextTags})",
            "legendFormat": "max {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_non_heap_used{ContextTags})",
            "legendFormat": "used {{kubernetes_pod_name}}"
          }
        ],
        "yaxes": {
          "format": "bytes"
        }
      },
      {
        "graphName": "Total Memory",
        "promQL": [
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_total_committed{ContextTags})",
            "legendFormat": "committed {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_total_init{ContextTags})",
            "legendFormat": "init {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_total_max{ContextTags})",
            "legendFormat": "max {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_total_used{ContextTags})",
            "legendFormat": "used {{kubernetes_pod_name}}"
          }
        ],
        "yaxes": {
          "format": "bytes"
        }
      },
      {
        "graphName": "GC Rate",
        "promQL": [
          {
            "expr": "sum by (kubernetes_pod_name)(rate(jvm_PS_MarkSweep_count{ContextTags}[5m]))",
            "legendFormat": "PS_MarkSweep Rate {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(rate(jvm_PS_Scavenge_count{ContextTags}[5m]))",
            "legendFormat": "PS_Scavenge Rate {{kubernetes_pod_name}}"
          }
        ]
      },
      {
        "graphName": "GC Time",
        "promQL": [
          {
            "expr": "max by (kubernetes_pod_name)(jvm_PS_MarkSweep_time{ContextTags})",
            "legendFormat": "PS_MarkSweep max {{kubernetes_pod_name}}"
          },
          {
            "expr": "max by (kubernetes_pod_name)(jvm_PS_Scavenge_time{ContextTags})",
            "legendFormat": "PS_Scavenge max {{kubernetes_pod_name}}"
          }
        ]
      },
      {
        "graphName": "Class Loading",
        "promQL": [
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_loaded{ContextTags})",
            "legendFormat": "loaded {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_unloaded{ContextTags})",
            "legendFormat": "unloaded {{kubernetes_pod_name}}"
          }
        ]
      },
      {
        "graphName": "Memory Pool Usage",
        "promQL": [
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_pools_Code_Cache_usage{ContextTags})",
            "legendFormat": "Code Cache {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_pools_Compressed_Class_Space_usage{ContextTags})",
            "legendFormat": "Compressed Class Space {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_pools_PS_Eden_Space_usage{ContextTags})",
            "legendFormat": "PS Eden Space {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_pools_PS_Old_Gen_usage{ContextTags})",
            "legendFormat": "PS Old Gen {{kubernetes_pod_name}}"
          },
          {
            "expr": "sum by (kubernetes_pod_name)(jvm_pools_PS_Survivor_Space_usage{ContextTags})",
            "legendFormat": "PS Survivor Space {{kubernetes_pod_name}}"
          }
        ],
        "yaxes": {
          "format": "percent"
        }
      }
    ]
  kafka-exporter.json: |
    [
      {"graphName":"Brokers Online", "promQL":["count(kafka_server_replicamanager_leadercount{ContextTags})"]},
      {"graphName":"Active Controllers", "promQL":["sum(kafka_controller_kafkacontroller_activecontrollercount{ContextTags})"]},
      {"graphName":"Unclean Leader Election Rate", "promQL":["sum(irate(kafka_controller_controllerstats_uncleanleaderelections_total{ContextTags}[5m]))"]},
      {"graphName":"Online Partitions", "promQL":["sum(kafka_server_replicamanager_partitioncount{ContextTags})"]},
      {"graphName":"Under Replicated Partitions", "promQL":["sum(kafka_server_replicamanager_underreplicatedpartitions{ContextTags})"]},
      {"graphName":"Offline Partitions Count", "promQL":["sum(kafka_controller_kafkacontroller_offlinepartitionscount{ContextTags})"]},
      {"graphName":"Bytes Rate (In & Out)", "promQL":[
        "sum(irate(kafka_server_brokertopicmetrics_bytesin_total{ContextTags,topic=\"\"}[1m]))",
        "sum(irate(kafka_server_brokertopicmetrics_bytesout_total{ContextTags,topic=\"\"}[1m]))"
      ]},
      {"graphName":"Total Messages In", "promQL":["sum(irate(kafka_server_brokertopicmetrics_messagesin_total{ContextTags,topic=\"\"}[1m]))"]},
      {"graphName":"Produce Request Rate (Total & Failed)", "promQL":[
        "sum(irate(kafka_server_brokertopicmetrics_totalproducerequests_total{ContextTags,topic=\"\"}[1m]))",
        "sum(irate(kafka_server_brokertopicmetrics_failedproducerequests_total{ContextTags,topic=\"\"}[1m]))"
      ]},
      {"graphName":"Fetch Request Rate (Total & Failed)", "promQL":[
        "sum(irate(kafka_server_brokertopicmetrics_totalfetchrequests_total{ContextTags,topic=\"\"}[1m]))",
        "sum(irate(kafka_server_brokertopicmetrics_failedfetchrequests_total{ContextTags,topic=\"\"}[1m]))"
      ]},
      {"graphName":"Network Processor Avg Idle Percent", "promQL":["kafka_network_socketserver_networkprocessoravgidle_percent{ContextTags}*100"]},
      {"graphName":"Request Handler Avg Idle Percent", "promQL":["kafka_server_kafkarequesthandlerpool_requesthandleravgidle_percent{ContextTags}*100"]}
    ]
  kubernetes-exporter.json: |
    [
        {
            "graphName": "CPU Percent",
            "promQL": [
                {
                    "expr": "sum without(container_name,id,image,name)((irate(container_cpu_user_seconds_total{ContextTags}[1m]) + irate(container_cpu_system_seconds_total[1m])) * 100)",
                    "legendFormat": "{{kubernetes_pod_name}}"
                }
            ],
            "yaxes": {
                "format": "percent"
            }
        },
        {
            "graphName": "Resident Memory Used Percent",
            "promQL": [
                {
                    "expr": "sum without(container_name,id,image,name)((container_memory_rss{ContextTags} / container_spec_memory_limit_bytes < +Inf or container_memory_rss{ContextTags} / on (node_ip) group_left kube_node_status_capacity_memory_bytes) * 100)",
                    "legendFormat": "{{kubernetes_pod_name}}"
                }
            ],
            "yaxes": {
                "format": "percent"
            }
        },
        {
            "graphName": "Total Memory Used Percent",
            "promQL": [
                {
                    "expr": "sum without(container_name,id,image,name)((container_memory_usage_bytes{ContextTags} / container_spec_memory_limit_bytes < +Inf or container_memory_usage_bytes{ContextTags} / on (node_ip) group_left kube_node_status_capacity_memory_bytes) * 100)",
                    "legendFormat": "{{kubernetes_pod_name}}"
                }
            ],
            "yaxes": {
                "format": "percent"
            }
        },
        {
            "graphName": "File System Used Percent",
            "promQL": [
                {
                    "expr": "sum without(container_name, id, image, name)(container_fs_usage_bytes{ContextTags} / container_fs_limit_bytes * 100)",
                    "legendFormat": "{{kubernetes_pod_name}}"
                }
            ],
            "yaxes": {
                "format": "percent"
            }
        },
        {
            "graphName": "Bytes Received Per Second",
            "promQL": [
                {
                    "expr": "sum without(container_name, id, image, name, interface)(irate(container_network_receive_bytes_total{ContextTags}[1m]))",
                    "legendFormat": "{{kubernetes_pod_name}}"
                }
            ]
        },
        {
            "graphName": "Bytes Transmitted Per Second",
            "promQL": [
                {
                    "expr": "sum without (container_name,id, image, name, interface)(irate(container_network_transmit_bytes_total{ContextTags}[1m]))",
                    "legendFormat": "{{kubernetes_pod_name}}"
                }
            ]
        }
    ]
  lagom-exporter.json: |
    [
      {
        "graphName": "Circuit Breaker State",
        "promQL": [
          "min by (instance,circuit_breaker) (lagom_circuit_breaker_state{ContextTags})"
        ]
      },
      {
        "graphName": "Circuit Breaker Failures Per Second",
        "promQL": [
          "sum by (instance,circuit_breaker)(irate (lagom_circuit_breaker_failure{ContextTags}[1m]))"
        ]
      },
      {
        "graphName": "Circuit Breaker Latency 99%",
        "promQL": [
          "max by (instance,circuit_breaker) (lagom_circuit_breaker_latency_ns{ContextTags, quantile=\"0.99\"})"
        ],
        "yaxes": {
          "format": "ns"
        }
      },
      {
        "graphName": "Circuit Breaker Throughput Per Second",
        "promQL": [
          "sum by (instance,circuit_breaker)(irate (lagom_circuit_breaker_throughput{ContextTags}[1m]))"
        ]
      }
    ]
  memcached-exporter.json: |
    [
      {"graphName":"Miss Ratio", "promQL":["memcached_commands_total{ContextTags, status=\"miss\"}/memcached_commands_total{ContextTags}"]},
      {"graphName":"Evictions Per Second", "promQL":["irate(memcached_items_evicted_total{ContextTags}[1m])"]},
      {"graphName":"Connections Current", "promQL":["memcached_current_connections{ContextTags}"]},
      {"graphName":"Total Connections Per Second", "promQL":["irate(memcached_connections_total{ContextTags}[1m])"]},
      {"graphName":"Items Current", "promQL":["memcached_current_items{ContextTags}"]},
      {"graphName":"Cache Free", "promQL":["memcached_current_bytes{ContextTags}/memcached_limit_bytes{ContextTags}"]},
      {"graphName":"Items Evicted Per Second", "promQL":["irate(memcached_items_evicted_total{ContextTags}[1m])"]},
      {"graphName":"Items Reclaimed Per Second", "promQL":["irate(memcached_items_reclaimed_total{ContextTags}[1m])"]},
      {"graphName":"Total Commands Per Second", "promQL":["sum (irate(memcached_commands_total{ContextTags}[1m])) by (command)"]},
      {"graphName":"Bytes Read Per Second", "promQL":["irate(memcached_read_bytes_total{ContextTags}[1m])"]},
      {"graphName":"Bytes Written Per Second", "promQL":["irate(memcached_written_bytes_total{ContextTags}[1m])"]}
    ]
  play-exporter.json: |
    [
      {
        "graphName": "Play Client Requests Per Second",
        "promQL": [
          "sum by (http_client)(irate(play_http_client_play_client_requests{ContextTags}[1m]))"
        ]
      },
      {
        "graphName": "Play Client Response Time",
        "promQL": [
          "max by (http_client)(play_http_client_play_client_service_response_time_ns{ContextTags, quantile=\"0.99\"})"
        ],
        "yaxes": {
          "format": "ns"
        }
      }
    ]
  redis-exporter.json: |
    [
      {"graphName":"Redis Memory Used", "promQL":["redis_memory_used_bytes{ContextTags}"]},
      {"graphName":"Commands Processed Per Second", "promQL":["irate(redis_commands_processed_total{ContextTags}[1m])"]},
      {"graphName":"Keys Evicted Per Second", "promQL":["irate(redis_evicted_keys_total{ContextTags}[1m])"]},
      {"graphName":"Keys Evicted Per Second", "promQL":["irate(redis_evicted_keys_total{ContextTags}[1m])"]},
      {"graphName":"Connections", "promQL":["redis_connected_clients{ContextTags}"]}
    ]
  zookeeper-exporter.json: |
    [
      {"graphName":"Quorum Size", "promQL":["max(zookeeper_quorumsize{ContextTags})"]},
      {"graphName":"Alive Connections", "promQL":["sum(zookeeper_numaliveconnections{ContextTags})"]},
      {"graphName":"Number of ZNodes", "promQL":["avg(zookeeper_inmemorydatatree_nodecount{ContextTags})"]},
      {"graphName":"Number of Watchers", "promQL":["sum(zookeeper_inmemorydatatree_watchcount{ContextTags})"]},
      {"graphName":"Outstanding Requests", "promQL":["zookeeper_outstandingrequests{ContextTags}"]},
      {"graphName":"Request Latency - Minimum", "promQL":["zookeeper_minrequestlatency{ContextTags}"]},
      {"graphName":"Request Latency - Average", "promQL":["zookeeper_avgrequestlatency{ContextTags}"]},
      {"graphName":"Request Latency - Maximum", "promQL":["zookeeper_maxrequestlatency{ContextTags}"]},
      {"graphName":"Synced Followers", "promQL":["zk_synced_followers{ContextTags}"]},
      {"graphName":"Open File Descriptors", "promQL":["zk_open_file_descriptor_count{ContextTags}"]},
      {"graphName":"Pending Syncs", "promQL":["zk_pending_syncs{ContextTags}"]}
    ]
  

---
# Source: enterprise-suite/templates/prometheus-configmap-api.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: server
  name: console-api
data:
  default-monitors.json: |
    {
      "monitors": {
        "_": {
          "kube_container_restarts": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "kube_pod_container_restarts_rate",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "container restarting rapidly",
              "description": "container {{$labels.container}} in pod {{$labels.pod}} of {{$labels.es_workload}} restarting rapidly"
            }
          },
          "kube_pod_not_ready": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "kube_pod_ready",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "critical": {
                  "comparator": "<",
                  "threshold": "1"
                }
              },
              "summary": "pod not ready",
              "description": "pod {{$labels.pod}} on {{$labels.es_workload}} not ready"
            }
          },
          "kube_pod_not_running": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "kube_pod_not_running",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "pod not running",
              "description": "pod {{$labels.pod}} on {{$labels.es_workload}} not running"
            }
          },
          "kube_workload_generation_lag": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "kube_workload_generation_lag",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "workload not updating",
              "description": "workload {{$labels.es_workload}} has not updated for 10 minutes"
            }
          },
          "kafka_consumergroup_lag": {
            "monitorVersion": "1",
            "model": "growth",
            "parameters": {
              "metric": "kafka_consumergroup_lag",
              "period": "5m",
              "minslope": "1",
              "confidence": "1",
              "severity": {
                "warning": {
                  "window": "5m"
                }
              },
              "summary": "consumergroup falling behind",
              "description": "{{$labels.consumergroup}} is falling behind"
            }
          },
          "scrape_time": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "scrape_duration_seconds",
              "period": "15m",
              "minval": "3",
              "window": "15m",
              "confidence": "0.5",
              "severity": {
                "warning": {
                  "numsigma": "3"
                }
              },
              "summary": "scrape time anomalous",
              "description": "{{$labels.instance}} has anomalous scrape_duration_seconds"
            }
          },
          "lightbend_monitor_api_errors": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "es_monitor_api_last_error",
              "window": "1m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "lightbend console monitor errors",
              "description": "Lightbend console api on {{$labels.instance}} has monitor errors"
            }
          },
  
          "akka_inbox_growth": {
            "monitorVersion": "1",
            "model": "growth",
            "parameters": {
              "metric": "akka_actor_mailbox_size",
              "filters": {
                "quantile": "0.5"
              },
              "period": "15m",
              "minslope": "0.1",
              "confidence": "1",
              "severity": {
                "critical": {
                  "window": "5m"
                }
              },
              "summary": "actor inbox growing",
              "description": "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has a growing inbox"
            }
          },
          "akka_processing_time": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "akka_actor_processing_time_ns",
              "filters": {
                "quantile": "0.5"
              },
              "period": "15m",
              "minval": "100000000",
              "window": "15m",
              "confidence": "0.5",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "actor processing time is anomalous",
              "description": "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has unusual processing time"
            }
          },
          "prometheus_notifications_dropped": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "prometheus_notifications_dropped_rate",
              "window": "10m",
              "confidence": "0.25",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "Prometheus dropping notifications",
              "description": "Prometheus dropping alerts sent to Alertmanager"
            }
          },
          "prometheus_notification_queue": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "prometheus_notification_queue_percent",
              "window": "10m",
              "confidence": "0.5",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "50"
                }
              },
              "summary": "Prometheus alert queue filling",
              "description": "Prometheus alert queue is staying over 50% full"
            }
          },
          "prometheus_rule_evaluation_failures": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "prometheus_rule_evaluation_failures_rate",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "Prometheus rule failures",
              "description": "Prometheus has {{$value}} rules failing"
            }
          },
          "prometheus_target_too_many_metrics": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "prometheus_target_scrapes_exceeded_sample_limit_rate",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "Prometheus target over limit",
              "description": "Prometheus target at {{$labels.instance}} has too many metrics"
            }
          },
          "prometheus_tsdb_reloads_failures": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "prometheus_tsdb_reloads_failures_rate",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "critical": {
                  "comparator": ">=",
                  "threshold": "1"
                }
              },
              "summary": "Prometheus tsdb reload failing",
              "description": "Prometheus had {{$value}} reload failures"
            }
          },
          "prometheus_target_down": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "up",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": "!=",
                  "threshold": "1"
                }
              },
              "summary": "metrics target down",
              "description": "cannot connect to {{$labels.instance}} metrics endpoint for {{$labels.job}} data"
            }
          },
          "prometheus_config_reload_failed": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "prometheus_config_last_reload_successful",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "critical": {
                  "comparator": "!=",
                  "threshold": "1"
                }
              },
              "summary": "prometheus bad config",
              "description": "current config for prometheus has errors, will prevent restarts"
            }
          },
          "prometheus_scrape_time": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "prometheus_target_sync_percent",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "75"
                }
              },
              "summary": "prometheus has long scrape times",
              "description": "prometheus is taking {{$value}}% of the {{$labels.interval}} interval to get {{$labels.scrape_job}} metrics from {{$labels.instance}}"
            }
          },
          "zookeeper_latency": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "zk_avg_latency",
              "period": "15m",
              "minval": "10",
              "window": "15m",
              "confidence": "0.5",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Zookeeper Latency",
              "description": "ZooKeeper latency is not normal in {{$labels.es_workload}} on {{$labels.instance}}"
            }
          },
          "zookeeper_connections": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "zk_num_alive_connections",
              "period": "15m",
              "minval": "10",
              "window": "15m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Zookeeper live connections is not normal",
              "description": "Zookeeper live connection in {{$labels.es_workload}} is not normal on {{$labels.instance}}"
            }
          },
          "zookeeper_pending_syncs": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "zk_pending_syncs",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "critical": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "Zookeeper pending-syncs is not normal",
              "description": "Zookeeper Pending syncs in {{$labels.es_workload}} is greater than 0."
            }
          },
          "zookeeper_open_file_descriptor": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "zk_open_file_descriptor_count",
              "period": "15m",
              "minval": "10",
              "window": "15m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Zookeeper open file descriptor growth",
              "description": "Zookeeper open file descriptors in {{$labels.es_workload}} is not normal in {{$labels.instance}}"
            }
          },
          "cassandra_write_latency": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "cassandra_clientrequest_write_latency",
              "period": "15m",
              "minval": "10",
              "window": "15m",
              "confidence": "0.5",
              "severity": {
                "critical": {
                  "numsigma": "2"
                }
              },
              "summary": "Cassandra Write Latency",
              "description": "Cassandra write latency is not normal on {{$labels.es_workload}} in {{$labels.instance}}"
            }
          },
          "cassandra_read_latency": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "cassandra_clientrequest_read_latency",
              "period": "15m",
              "minval": "10",
              "window": "15m",
              "confidence": "0.5",
              "severity": {
                "critical": {
                  "numsigma": "2"
                }
              },
              "summary": "Cassandra Read Latency",
              "description": "Cassandra read latency is not normal on {{$labels.es_workload}} in {{$labels.instance}}"
            }
          },
          "redis_keyspace_miss": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "redis_keyspace_miss_ratio",
              "period": "10m",
              "minval": "1",
              "window": "10m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Redis key space miss ratio growth",
              "description": "Observing shifts in Redis key space ratio on {{$labels.es_workload}} in {{$labels.instance}}"
            }
          },
          "redis_evictions": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "redis_evicted_keys_total",
              "period": "10m",
              "minval": "1",
              "window": "10m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Redis evictions growing",
              "description": "Redis evictions on {{$labels.es_workload}} are growing in {{$labels.instance}}"
            }
          },
          "redis_commands_processed": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "redis_commands_processed_total",
              "period": "5m",
              "minval": "10",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "3"
                }
              },
              "summary": "Redis command processed",
              "description": "Redis commands processed on {{$labels.es_workload}} is not normal in {{$labels.instance}}"
            }
          },
          "redis_connections": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "redis_connected_clients",
              "period": "15m",
              "minval": "10",
              "window": "15m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Redis client connections is not normal",
              "description": "Redis client connections on {{$labels.es_workload}} is not normal in {{$labels.instance}}"
            }
          },
          "kafka_incoming_messages": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "kafka_incoming_messages_rate",
              "period": "10m",
              "minval": "10",
              "window": "10m",
              "confidence": "1",
              "severity": {
                "critical": {
                  "numsigma": "2"
                }
              },
              "summary": "Kafka incoming message rate is not normal",
              "description": "Kafka incoming message rate on {{$labels.es_workload}} is not normal for topic {{$labels.topic}}"
            }
          },
          "kafka_offline_partition": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "kafka_controller_kafkacontroller_offlinepartitionscount",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "critical": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "Kafka offline partition is not zero",
              "description": "Kafka offline partition is high on {{$labels.es_workload}} in {{$labels.instance}}"
            }
          },
          "kafka_under_replicated_partitions": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "kafka_server_replicamanager_underreplicatedpartitions",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "critical": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "Kafka under replicated partitions is up",
              "description": "Kafka under replicated partitions is high on {{$labels.es_workload}} in {{$labels.instance}}"
            }
          },
          "memcached_miss_ratio": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "memcached_miss_ratio",
              "period": "15m",
              "minval": "10",
              "window": "15m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Memcached miss ratio shifts",
              "description": "Memcached miss ratio in {{$labels.es_workload}} is not normal on {{$labels.instance}}"
            }
          },
          "memcached_current_connections": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "memcached_current_connections",
              "period": "15m",
              "minval": "10",
              "window": "15m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Memcached connections are changing",
              "description": "Memcached connections in {{$labels.es_workload}} is not normal on {{$labels.instance}}"
            }
          },
          "memcached_evictions": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "memcached_evictions_rate",
              "period": "15m",
              "minval": "1",
              "window": "15m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "Memcached evictions shifts",
              "description": "Memcached evictions in {{$labels.es_workload}} is not normal on {{$labels.instance}}"
            }
          },
          "akka_http_server_response_time": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "akka_http_http_server_response_time_ns",
              "filters": {
                "quantile": "0.5"
              },
              "period": "15m",
              "minval": "100000000",
              "window": "15m",
              "confidence": "0.5",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "HTTP server response time is anomalous",
              "description": "{{$labels.app}} on {{$labels.instance}} has unusual response time"
            }
          },
          "akka_http_client_response_time": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "akka_http_http_client_http_client_service_response_time_ns",
              "filters": {
                "quantile": "0.5"
              },
              "period": "15m",
              "minval": "100000000",
              "window": "15m",
              "confidence": "0.5",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "HTTP client response time is anomalous",
              "description": "{{$labels.app}} on {{$labels.instance}} has unusual response time"
            }
          },
          "akka_http_server_5xx": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "akka_http_http_server_responses_5xx_rate",
              "window": "5m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "comparator": ">",
                  "threshold": "0"
                }
              },
              "summary": "HTTP 5xx errors",
              "description": "HTTP server at {{$labels.instance}} has 5xx errors"
            }
          },
          "play_http_client_response_time": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "play_http_client_play_client_service_response_time_ns",
              "filters": {
                "quantile": "0.5"
              },
              "period": "15m",
              "minval": "100000000",
              "window": "15m",
              "confidence": "0.5",
              "severity": {
                "warning": {
                  "numsigma": "2"
                }
              },
              "summary": "HTTP client response time is anomalous",
              "description": "{{$labels.app}} on {{$labels.instance}} has unusual response time"
            }
          },
          "lagom_circuit_breaker_state": {
            "monitorVersion": "1",
            "model": "threshold",
            "parameters": {
              "metric": "lagom_circuit_breaker_state",
              "window": "1m",
              "confidence": "5e-324",
              "severity": {
                "critical": {
                  "comparator": "<",
                  "threshold": "3"
                }
              },
              "summary": "Circuit breaker tripped",
              "description": "Circuit breaker {{$labels.circuit_breaker}} tripped on {{$labels.instance}}"
            }
          },
          "kafka_consumer_throughput": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "kafka_consumer_topic_consumed_rate",
              "period": "15m",
              "minval": "1000",
              "window": "15m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "3"
                }
              },
              "summary": "Kafka consumer throughput is anomalous",
              "description": "{{$labels.es_workload}} has unusual throughput on {{$labels.topic}}"
            }
          },
          "kafka_producer_throughput": {
            "monitorVersion": "1",
            "model": "sma",
            "parameters": {
              "metric": "kafka_producer_topic_send_rate",
              "period": "15m",
              "minval": "1000",
              "window": "15m",
              "confidence": "1",
              "severity": {
                "warning": {
                  "numsigma": "3"
                }
              },
              "summary": "Kafka producer throughput is anomalous",
              "description": "{{$labels.es_workload}} has unusual throughput on {{$labels.topic}}"
            }
          },
          "kafka_consumer_lag": {
            "monitorVersion": "1",
            "model": "growth",
            "parameters": {
              "metric": "kafka_consumer_topic_lag_max",
              "period": "15m",
              "minslope": "0.1",
              "confidence": "1",
              "severity": {
                "warning": {
                  "window": "15m"
                }
              },
              "summary": "consumergroup falling behind",
              "description": "{{$labels.es_workload}} has lag on {{$labels.topic}}"
            }
          }
        }
      }
    }
  prometheus.yml: |
    {{/*
       * Note to Helm devs: this is NOT a Helm template, but rather a plain go template used
       * in console-api to generate the final prometheus.yml.
       * sanitizeForPrometheusLabel is a function in console-api that replaces [.-] with "_"
       */}}
    global:
      # dev mode
      scrape_interval: 10s
      evaluation_interval: 10s
  
    rule_files:
      - /etc/config/rules/*.yaml
  
    {{ if .AlertmanagerAddresses }}
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          {{ range $index, $address := .AlertmanagerAddresses }}
          - {{ $address }}
          {{ end }}
    {{ end }}
  
    scrape_configs:
  
      # Container metrics from kubelet cadvisor endpoint
  
      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  
        kubernetes_sd_configs:
          - role: node
  
        honor_labels: true
  
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node_name
          - source_labels: [__meta_kubernetes_node_address_InternalIP]
            target_label: node_ip
  
        # These are metric_relabel_configs since the source labels come from the scraped `/metrics`.
        metric_relabel_configs:
          - source_labels: [pod_name]
            target_label: kubernetes_pod_name
          - regex: pod_name
            action: labeldrop
          # pause containers have all the network stats for a pod
          - source_labels: [container_name, __name__]
            regex: POD;container_(network).*
            target_label: container_name
          # drop all other pause container stats
          - source_labels: [container_name]
            regex: POD
            action: drop
          # drop system containers with no name
          - source_labels: [container_name]
            regex: ^$
            action: drop
          # drop high cardinality debug metrics
          - source_labels: [__name__]
            regex: container_(network_tcp_usage_total|tasks_state|cpu_usage_seconds_total|memory_failures_total|network_udp_usage_total)
            action: drop
          # extract workload from workload-hash-rand
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.*)-[456789bcdf]{4,10}-[bcdfghjklmnpqrstvwxz2456789]{5};
            target_label: es_workload
          # extract workload from workload-rand
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.*)-[bcdfghjklmnpqrstvwxz2456789]{5};
            target_label: es_workload
          # spark executor workload
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.*)-[0-9]{13}-exec-[0-9]{1,3};
            replacement: ${1}-exec
            target_label: es_workload
          # extract workload from workload-num
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.*)-[0-9]{1,4};
            target_label: es_workload
          # copy pod name to workload
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.+);
            target_label: es_workload
  
    {{ .MonitorTypeRules | indent 6 }}
  
      # kubelet metrics (not for monitoring, just grafana data)
      - job_name: 'kubelet'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  
        kubernetes_sd_configs:
          - role: node
  
        honor_labels: true
  
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node_name
          - source_labels: [__meta_kubernetes_node_address_InternalIP]
            target_label: node_ip
  
  
      # kube-state-metrics
  
      - job_name: 'kube-state-metrics'
  
        kubernetes_sd_configs:
          - role: endpoints
  
        honor_labels: true
  
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex: prometheus-kube-state-metrics
            action: keep
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
  
        # es_workload labels:
        # These are metric_relabel_configs since the source labels come from the scraped `/metrics`.
        metric_relabel_configs:
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'ReplicaSet;(.+)-[^-]+-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'StatefulSet;(.+)-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'DaemonSet;(.+)-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'Job;(.+)-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'ReplicationController;(.+)-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: '.none.;(.+);'
            target_label: es_workload
          - source_labels: [deployment, es_workload]
            regex: '(.+);'
            target_label: es_workload
          - source_labels: [daemonset, es_workload]
            regex: '(.+);'
            target_label: es_workload
          # extract workload from workload-hash-rand
          - source_labels: [pod, es_workload]
            regex: (.*)-[456789bcdf]{4,10}-[bcdfghjklmnpqrstvwxz2456789]{5};
            target_label: es_workload
          # extract workload from workload-rand
          - source_labels: [pod, es_workload]
            regex: (.*)-[bcdfghjklmnpqrstvwxz2456789]{5};
            target_label: es_workload
          # spark executor workload
          - source_labels: [pod, es_workload]
            regex: (.*)-[0-9]{13}-exec-[0-9]{1,3};
            replacement: ${1}-exec
            target_label: es_workload
          # extract workload from workload-num
          - source_labels: [pod, es_workload]
            regex: (.*)-[0-9]{1,4};
            target_label: es_workload
          # copy pod name to workload
          - source_labels: [pod, es_workload]
            regex: (.+);
            target_label: es_workload
  
    {{ .MonitorTypeRules | indent 6 }}
  
      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `{{ .PrometheusDomain }}/scrape`: Only scrape services that have a value of `true`
      # * `{{ .PrometheusDomain }}/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `{{ .PrometheusDomain }}/path`: If the metrics path is not `/metrics` override this.
      # * `{{ .PrometheusDomain }}/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
  
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: endpoints
  
        honor_labels: true
  
        relabel_configs:
          # these have dedicated scrape sections:
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex: prometheus-node-exporter
            action: drop
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex:  prometheus-kube-state-metrics
            action: drop
  
          # _scrape _scheme _path _port annotation triggers:
          - source_labels: [__meta_kubernetes_service_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
  
          # Keep only the ports ending in the suffix `metrics` if prometheus.io/port is unspecified.
          - source_labels: [__meta_kubernetes_service_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_port, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: ^(.+;.*)|(;.*metrics)$
  
          # Set port from prometheus.io/port if it's set.
          - source_labels: [__address__, __meta_kubernetes_service_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_port]
            action: replace
            # Extract IP from address. Address might not contain a port in some cases.
            regex: ([^:]+):?(?:\d*);(\d+)
            replacement: ${1}:${2}
            target_label: __address__
  
          # metadata labels
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - source_labels: [__meta_kubernetes_pod_label_pod_template_hash, __meta_kubernetes_pod_name, es_workload]
            action: replace
            regex: '[^;]+;(.*)-[^-]+-[^-]+;'
            target_label: es_workload
          - source_labels: [__meta_kubernetes_pod_label_statefulset_kubernetes_io_pod_name, es_workload]
            action: replace
            regex: '(.*)-[0-9]+;'
            target_label: es_workload
          # spark executor workload
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.*)-[0-9]{13}-exec-[0-9]{1,3};
            replacement: ${1}-exec
            target_label: es_workload
          # fall through plain pod name
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.*);
            target_label: es_workload
  
    {{ .MonitorTypeRules | indent 6 }}
  
  
      # Scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `{{ .PrometheusDomain }}/scrape`: Only scrape pods that have a value of `true`
      # * `{{ .PrometheusDomain }}/path`: If the metrics path is not `/metrics` override this.
      # * `{{ .PrometheusDomain }}/port`: Scrape the pod on the indicated port instead of all `metrics` ports.
      - job_name: 'kubernetes-pods'
  
        kubernetes_sd_configs:
          - role: pod
  
        honor_labels: true
  
        relabel_configs:
  
          # Only scrape pods with prometheus.io/scrape=true.
          - source_labels: [__meta_kubernetes_pod_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_scrape]
            action: keep
            regex: true
  
          # Set scrape path from prometheus.io/path.
          - source_labels: [__meta_kubernetes_pod_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
  
          # Keep only the ports ending in the suffix `metrics` if prometheus.io/port is unspecified.
          - source_labels: [__meta_kubernetes_pod_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_port, __meta_kubernetes_pod_container_port_name]
            action: keep
            regex: ^(.+;.*)|(;.*metrics)$
  
          # Set port from prometheus.io/port if it's set.
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_{{ sanitizeForPrometheusLabel .PrometheusDomain }}_port]
            action: replace
            # Extract IP from address. Address might not contain a port in some cases.
            regex: ([^:]+):?(?:\d*);(\d+)
            replacement: ${1}:${2}
            target_label: __address__
  
          # Copy all labels from the pod to the scraped metrics.
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
  
          # Set the namespace label from metadata.
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
  
          # Set the kubernetes_pod_name label from metadata.
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
  
          # Set the node_name label from metadata.
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
  
          # Set the node_ip label from metadata.
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
  
          # Set the workload label from pod name.
          - source_labels: [__meta_kubernetes_pod_label_pod_template_hash, __meta_kubernetes_pod_name, es_workload]
            action: replace
            regex: '[^;]+;(.*)-[^-]+-[^-]+;'
            target_label: es_workload
  
          # Set the workload label from statefulset if pod name was unable to set it.
          - source_labels: [__meta_kubernetes_pod_label_statefulset_kubernetes_io_pod_name, es_workload]
            action: replace
            regex: '(.*)-[0-9]+;'
            target_label: es_workload
  
          # spark executor workload
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.*)-[0-9]{13}-exec-[0-9]{1,3};
            replacement: ${1}-exec
            target_label: es_workload
  
          # fall through plain pod name
          - source_labels: [kubernetes_pod_name, es_workload]
            regex: (.*);
            target_label: es_workload
  
    {{ .MonitorTypeRules | indent 6 }}
  static-rules.yml: |
    - record: kube_node_pressure
      expr: avg by (es_workload, condition, node_ip, node_name) (kube_node_status_condition{condition!="Ready", status="true"})
  
    # kube_pod_ready: exclude pods where 100% of containers have terminated (eg. Jobs)
    - record: kube_pod_ready
      expr: kube_pod_status_ready{condition="true"} unless on (pod) avg by (pod) (kube_pod_container_status_terminated) == 1
  
    - record: kube_pod_container_restarts_rate
      expr: rate(kube_pod_container_status_restarts_total[1m])>=0 unless on (pod) avg by (pod) (kube_pod_container_status_terminated) == 1
  
    - record: container_starts_total
      expr: sum by (es_workload, namespace, es_monitor_type) (1 + kube_pod_container_status_restarts_total)
  
    - record: kube_pod_failed
      expr: kube_pod_status_phase{phase="Failed"}
  
    - record: kube_pod_not_running
      expr: 1 - kube_pod_status_phase{phase="Running"} and ignoring(phase) kube_pod_status_phase{phase="Failed"}==0 and ignoring(phase) kube_pod_status_phase{phase="Succeeded"}==0
  
    - record: kube_workload_generation_lag
      expr: avg by (es_workload, namespace, es_monitor_type) (kube_deployment_metadata_generation - kube_deployment_status_observed_generation)
  
    - record: kube_workload_generation_lag
      expr: avg by (es_workload, namespace, es_monitor_type) (kube_daemonset_status_desired_number_scheduled - kube_daemonset_status_number_ready)
  
    - record: prometheus_notification_queue_percent
      expr: 100 * prometheus_notifications_queue_length / prometheus_notifications_queue_capacity
  
    - record: prometheus_target_sync_percent
      expr: 100 * prometheus_target_sync_length_seconds{quantile="0.99"} / on (job,instance) group_left(interval) prometheus_target_interval_length_seconds{quantile="0.01"}
  
    - record: prometheus_notifications_dropped_rate
      expr: irate(prometheus_notifications_dropped_total[5m])
  
    - record: prometheus_rule_evaluation_failures_rate
      expr: irate(prometheus_rule_evaluation_failures_total[5m])
  
    - record: prometheus_target_scrapes_exceeded_sample_limit_rate
      expr: irate(prometheus_target_scrapes_exceeded_sample_limit_total[5m])
  
    - record: prometheus_tsdb_reloads_failures_rate
      expr: irate(prometheus_tsdb_reloads_failures_total[5m])
  
    - record: akka_processing_time_seconds
      expr: akka_actor_processing_time_ns{quantile="0.5"} / 1000000000
  
    - record: zk_open_file_ratio
      expr: (zk_open_file_descriptor_count/zk_max_file_descriptor_count) * 100
  
    - record: redis_keyspace_miss_ratio
      expr: (redis_keyspace_misses_total/redis_keyspace_hits_total) * 100
  
    - record: kafka_incoming_messages_rate
      expr: sum without (instance) (irate(kafka_server_brokertopicmetrics_messagesin_total[5m]))
  
    - record: kafka_active_controllers
      expr: sum by (namespace, es_workload, es_monitor_type) (kafka_controller_kafkacontroller_activecontrollercount)
  
    - record: memcached_miss_ratio
      expr: (sum without(command, status) (memcached_commands_total{status="miss"})/sum without(command, status) (memcached_commands_total)) * 100
  
    - record: memcached_evictions_rate
      expr: irate(memcached_items_evicted_total[5m])
  
    - record: akka_http_http_server_responses_5xx_rate
      expr: irate(akka_http_http_server_responses_5xx[5m]) and akka_http_http_server_responses_5xx offset 1m
  
    - record: kafka_consumer_topic_consumed_rate
      expr: sum by (app_kubernetes_io_component, app_kubernetes_io_managed_by, app_kubernetes_io_name, app_kubernetes_io_part_of, es_monitor_type, es_workload, namespace, topic) (kafka_consumer_consumer_fetch_manager_metrics_records_consumed_rate)
  
    - record: kafka_producer_topic_send_rate
      expr: sum by (app_kubernetes_io_component, app_kubernetes_io_managed_by, app_kubernetes_io_name, app_kubernetes_io_part_of, es_monitor_type, es_workload, namespace, topic) (kafka_producer_producer_metrics_record_send_rate)
  
    - record: kafka_consumer_topic_lag_max
      expr: max by (app_kubernetes_io_component, app_kubernetes_io_managed_by, app_kubernetes_io_name, app_kubernetes_io_part_of, es_monitor_type, es_workload, namespace, topic, instance) (kafka_consumer_consumer_fetch_manager_metrics_records_lag_max >= 0)
  

---
# Source: enterprise-suite/templates/prometheus-configmap-prom.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: server
  name: bare-prometheus
data:
  prometheus.yml: |-
    # this is a placeholder to keep prometheus running while it awaits the real config
    global:
      scrape_interval:     99m
      evaluation_interval: 99m
    scrape_configs:
      - job_name: wait
        static_configs:
          - targets: ['localhost:9090']
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: .+
          action: drop

---
# Source: enterprise-suite/templates/alertmanager-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: alertmanager-storage
spec:
  
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 32Gi


---
# Source: enterprise-suite/templates/es-grafana-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: es-grafana-storage
spec:
  
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 32Gi


---
# Source: enterprise-suite/templates/prometheus-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: prometheus-storage
spec:
  
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 256Gi


---
# Source: enterprise-suite/templates/kube-state-metrics-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-kube-state-metrics

---
# Source: enterprise-suite/templates/prometheus-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-server

---
# Source: enterprise-suite/templates/kube-state-metrics-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: lightbend:kube-state-metrics
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs: ["list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs: ["list", "watch"]
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]

---
# Source: enterprise-suite/templates/prometheus-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: lightbend:prometheus-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Source: enterprise-suite/templates/kube-state-metrics-rolebind.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: lightbend:kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: lightbend:kube-state-metrics
subjects:
- kind: ServiceAccount
  name: prometheus-kube-state-metrics
  namespace: lightbend

---
# Source: enterprise-suite/templates/prometheus-rolebind.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: lightbend:prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: lightbend:prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: lightbend

---
# Source: enterprise-suite/templates/alertmanager-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: alertmanager
spec:
  ports:
  - name: http
    port: 9093
    targetPort: 9093
  selector:
    app.kubernetes.io/name: lightbend-console
    app.kubernetes.io/component: alertmanager
  type: ClusterIP


---
# Source: enterprise-suite/templates/es-console-expose.yaml

apiVersion: v1
kind: Service
metadata:
  name: expose-es-console
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
    nodePort: 30080
  selector:
    app.kubernetes.io/name: lightbend-console
    app.kubernetes.io/component: es-console
  type: NodePort


---
# Source: enterprise-suite/templates/es-console-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: console-server
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: lightbend-console
    app.kubernetes.io/component: es-console
  type: ClusterIP

---
# Source: enterprise-suite/templates/es-grafana-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: grafana
    component: "server"
  name: grafana-server
spec:
  ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: lightbend-console
    app.kubernetes.io/component: grafana
  type: "ClusterIP"

---
# Source: enterprise-suite/templates/kube-state-metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-kube-state-metrics
  annotations:
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/name: lightbend-console
    app.kubernetes.io/component: kube-state-metrics
spec:
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: prometheus
    component: "kube-state-metrics"
  type: "ClusterIP"

---
# Source: enterprise-suite/templates/prometheus-service-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: console-api
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8180
  selector:
    app.kubernetes.io/name: lightbend-console
    app.kubernetes.io/component: prometheus

---
# Source: enterprise-suite/templates/prometheus-service-prom.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
spec:
  ports:
    - name: http
      port: 80
      targetPort: 9090
  selector:
    app.kubernetes.io/name: lightbend-console
    app.kubernetes.io/component: prometheus

---
# Source: enterprise-suite/templates/alertmanager-deployment.yaml

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: prometheus
    component: alertmanager
  name: prometheus-alertmanager
spec:
  replicas: 1

  strategy:
    # Always Recreate to ensure the PVs get released. It's not possible to have two replicas sharing a PV during deployment.
    type: Recreate
    # Needed for helm upgrade to succeed.
    rollingUpdate: null

  selector:
    matchLabels:
      app: prometheus
      component: alertmanager

  template:
    metadata:
      annotations:
        checksum/alertmanager-config: 80defaeb71676c73fc6988e08249907ff78a990d1910e9456ea8b8cef0223d8f
      labels:
        app.kubernetes.io/name: lightbend-console
        helm.sh/chart: enterprise-suite-1.0.2
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: alertmanager
        # Deprecated - these should be removed eventually. Kept to support upgrades with the old labels.
        app: prometheus
        component: alertmanager
    spec:
      
      serviceAccountName: default
      containers:
        - name: prometheus-alertmanager
          image: prom/alertmanager:v0.16.0
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          args:
            - --config.file=/etc/config/alertmanager.yml
            - --storage.path=/data
            - --cluster.listen-address=$(POD_IP):6783
            
          ports:
            - containerPort: 9093
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9093
            timeoutSeconds: 30
            initialDelaySeconds: 30

          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: data-volume
              mountPath: /data

        - name: prometheus-alertmanager-configmap-reload
          image: jimmidyson/configmap-reload:v0.2.2
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9093/-/reload
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

      volumes:
        - name: config-volume
          configMap:
            name: alertmanager-default
        - name: data-volume
          
          persistentVolumeClaim:
            claimName: alertmanager-storage
          


---
# Source: enterprise-suite/templates/es-console-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: es-console
spec:
  selector:
    matchLabels:
      run: es-console

  template:
    metadata:
      annotations:
        checksum/es-console-config: bf8577a8f056974cbe4e600419e2dbffed44beafb0b07fa9a45c933f6d432fb1
      labels:
        app.kubernetes.io/name: lightbend-console
        helm.sh/chart: enterprise-suite-1.0.2
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: es-console
        # Deprecated - these should be removed eventually. Kept to support upgrades with the old labels.
        run: es-console
    spec:
      

      imagePullSecrets:
      - name: commercial-credentials

      containers:
      # Used by nginx to look up service names dynamically.
      # go-dnsmasq has the unique property of using /etc/resolv.conf search domains.
      - name: dnsmasq
        image: lightbend-docker-registry.bintray.io/lightbend/go-dnsmasq:v0.1.7-1
        args:
          - --listen
          - "127.0.0.1:5353"
          - --verbose
          - --enable-search

      - name: es-console
        image: lightbend-docker-commercial-registry.bintray.io/enterprise-suite/es-console:v1.0.3
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: ui-config
          mountPath: /helm-data/assets/js

      volumes:
      - name: nginx-config
        configMap:
          name: es-console
          items:
          - key: default.conf
            path: default.conf
      - name: ui-config
        configMap:
          name: es-console
          items:
          - key: config.js
            path: config.js

---
# Source: enterprise-suite/templates/es-grafana-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana-server
  labels:
    app: grafana
    component: server
spec:
  replicas: 1

  strategy:
    # Always Recreate to ensure the PVs get released. It's not possible to have two replicas sharing a PV during deployment.
    type: Recreate
    # Needed for helm upgrade to succeed.
    rollingUpdate: null

  selector:
    matchLabels:
      app: grafana
      component: server

  template:
    metadata:
      labels:
        app.kubernetes.io/name: lightbend-console
        helm.sh/chart: enterprise-suite-1.0.2
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: grafana
        # Deprecated - these should be removed eventually. Kept to support upgrades with the old labels.
        app: grafana
        component: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        checksum/datasource-config: 7ee3b4952149b811cd0ba812bdedc5645aa19711250641d8f75662e4bd8b7686
        checksum/plugin-config: 7691198805c99deec9bef4884d99da822915f6f0c60c4f3edf4d6d1a45a16f45

    spec:
      

      imagePullSecrets:
      - name: commercial-credentials

      containers:
      - image: lightbend-docker-commercial-registry.bintray.io/enterprise-suite/es-grafana:v0.2.1
        imagePullPolicy: IfNotPresent
        name: grafana-server
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
        env:
          # The next two env variables set up anonymous access to grafana with editor access.
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: "Editor"
          - name: GF_SERVER_ROOT_URL
            value: "/service/grafana/"
          - name: GF_SERVER_ROUTER_LOGGING
            value: "true"
          - name: GF_ANALYTICS_REPORTING_ENABLED
            value: "false"
          - name: GF_ANALYTICS_CHECK_FOR_UPDATES
            value: "false"
        ports:
          - containerPort: 3000
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "echo \"Waiting for grafana to enable cinnamon plugin...\"; until curl --output /dev/null --silent --head --fail curl http://127.0.0.1:3000; do echo -n '.' ;  sleep 2; done ; curl -XPOST 'admin:admin@127.0.0.1:3000/api/plugins/cinnamon-prometheus-app/settings?enabled=true' -d '' || true" ]
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        volumeMounts:
        - name: grafana-dashboards
          mountPath: /usr/share/grafana/public/conf
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources/
        - name: grafana-data
          mountPath: /var/lib/grafana

      volumes:
      - name: grafana-dashboards
        configMap:
          name: exporter-graphs-cm
      - name: grafana-datasources
        configMap:
          name: grafana-datasource-cm
      - name: grafana-data
        
        persistentVolumeClaim:
          claimName: es-grafana-storage
        

---
# Source: enterprise-suite/templates/kube-state-metrics-deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: prometheus
    component: kube-state-metrics
  name: prometheus-kube-state-metrics
spec:
  replicas: 1

  selector:
    matchLabels:
      app: prometheus
      component: kube-state-metrics

  template:
    metadata:
      labels:
        app.kubernetes.io/name: lightbend-console
        helm.sh/chart: enterprise-suite-1.0.2
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: kube-state-metrics
        # Deprecated - these should be removed eventually. Kept to support upgrades with the old labels.
        app: prometheus
        component: kube-state-metrics

    spec:
      
      serviceAccountName: prometheus-kube-state-metrics
      containers:
        - name: prometheus-kube-state-metrics
          image: gcr.io/google_containers/kube-state-metrics:v1.2.0
          args:
            - --port=8080
            - --telemetry-port=8081
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          ports:
            - name: metrics
              containerPort: 8080


---
# Source: enterprise-suite/templates/prometheus-deployment.yaml
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    app: prometheus
    component: server
  name: prometheus-server
spec:
  replicas: 1

  strategy:
    # Always Recreate to ensure the PVs get released. It's not possible to have two replicas sharing a PV during deployment.
    type: Recreate
    # Needed for helm upgrade to succeed.
    rollingUpdate: null

  selector:
    matchLabels:
      app: prometheus
      component: server

  template:
    metadata:
      labels:
        app.kubernetes.io/name: lightbend-console
        helm.sh/chart: enterprise-suite-1.0.2
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: prometheus
        # Deprecated - these should be removed eventually. Kept to support upgrades with the old labels.
        app: prometheus
        component: server
      annotations:
        prometheus.io/scrape: "true"
        checksum/console-api-config: bdc18268d23952d803d4bd4e49ca626ce270147a4b4c2f4a4b7118fc3a35331b
        checksum/bare-prometheus-config: 8898a493fb7758aaed74b5167d86ccd6d773f74a9f27bee46496d93754a9b39c

    spec:
      serviceAccountName: prometheus-server

      securityContext:
      

      initContainers:
        - name: setup
          image: alpine:3.8
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
          args:
            - mkdir -p /etc/config/rules;
              cp /etc/bare/prometheus.yml /etc/config/
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
            - mountPath: /etc/bare
              name: bare-prometheus

        # For vanilla K8s clusters, we need to match prometheus-data permissions to the prometheus user.
        # In prometheus 2.x, this is `65534`.
        # For Openshift the below will fail, but we can safely ignore it as Openshift remaps the user itself.
        - name: change-prometheus-data-volume-ownership
          image: busybox:1.30
          command:
            - sh
            - -c
            - "chown -Rc 65534:65534 /data 2>/dev/null || true"
          volumeMounts:
            - name: prometheus-data-volume
              mountPath: /data
              subPath: prometheus-data

      imagePullSecrets:
        - name: commercial-credentials

      containers:
        - name: console-api
          image: lightbend-docker-commercial-registry.bintray.io/enterprise-suite/console-api:v1.0.11
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          args:
            - --configPath=/etc/config/
            - --storagePath=/monitor-data/
            - --staticConfig=/etc/console-api/static-rules.yml
            - --defaultMonitorsFile=/etc/console-api/default-monitors.json
            - --prometheusTemplate=/etc/console-api/prometheus.yml
            - --prometheusDomain=prometheus.io
            - --alertmanagers=alertmanager:9093
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: console-api-volume
              mountPath: /etc/console-api
            - name: prometheus-data-volume
              mountPath: /monitor-data
              subPath: monitor-data
          ports:
            - name: metrics
              containerPort: 8180
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8180
              scheme: HTTP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8180
              scheme: HTTP
            initialDelaySeconds: 30

        - name: console-api-configmap-reload
          image: jimmidyson/configmap-reload:v0.2.2
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          args:
          - --volume-dir=/etc/console-api
          - --webhook-url=http://127.0.0.1:8180/reload
          volumeMounts:
          - name: console-api-volume
            mountPath: /etc/console-api

        - name: prometheus-server
          image: prom/prometheus:v2.7.1

          resources:
            requests:
              cpu: 100m
              memory: 250Mi

          args:
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
            
          ports:
            - name: metrics
              containerPort: 9090

          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            timeoutSeconds: 30

          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            timeoutSeconds: 30
            initialDelaySeconds: 30

          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
            - name: prometheus-data-volume
              mountPath: /data
              subPath: prometheus-data

      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          emptyDir: {}
        - name: console-api-volume
          configMap:
            name: console-api
        - name: prometheus-data-volume
          
          persistentVolumeClaim:
            claimName: prometheus-storage
          
        - name: bare-prometheus
          configMap:
            name: bare-prometheus

---
# Source: enterprise-suite/templates/commercial-credentials.yaml

# Credentials generation was disabled.
# Use:
# kubectl -n lightbend create secret docker-registry \
#      commercial-credentials \
#      --docker-server=lightbend-docker-commercial-registry.bintray.io \
#      --docker-username=mybintrayuser \
#      --docker-password=mybintraytoken

