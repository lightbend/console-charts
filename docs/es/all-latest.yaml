---
# Source: enterprise-suite-latest/templates/es-grafana.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: exporter-graphs-cm
data:
  akka-exporter.json: |
    [
      {"graphName":"Mailbox Size", "promQL":["max by (actor)(akka_actor_mailbox_size{ContextTags})"]},
      {"graphName":"Mailbox Time", "promQL":["max by (actor)(akka_actor_mailbox_time_ns{ContextTags,quantile=\"0.99\"})"]},
      {"graphName":"Actor Failures Rate", "promQL":["sum by (actor) (irate(akka_actor_actor_failure{ContextTags}[1m]))"]},
      {"graphName":"Processed Message Rate", "promQL":["sum by (actor)(irate(akka_actor_processed_messages{ContextTags}[1m]))"]},
      {"graphName":"Processing Time", "promQL":["max by (actor)(akka_actor_processing_time_ns{ContextTags,quantile=\"0.99\"})"]},
      {"graphName":"Sent Messages Rate", "promQL":["sum by (actor)(irate(akka_actor_sent_messages{ContextTags}[1m]))"]},
      {"graphName":"Running Actors", "promQL":["sum by (actor)(akka_actor_running_actors{ContextTags})"]},
      {"graphName":"Unhandled Messages Rate", "promQL":["sum by (actor)(irate(akka_actor_unhandled_message{ContextTags}[1m]))"]},
      {"graphName":"Dead Letters Rate", "promQL":["sum by (actor) (irate(akka_actor_dead_letter{ContextTags}[1m]))"]},
      {"graphName":"Dispatcher Queue Size", "promQL":["max by (actor_system) (akka_dispatcher_queue_size{ContextTags})"]},
      {"graphName":"Dispatcher Pool Size", "promQL":["sum by (actor_system) (akka_dispatcher_pool_size{ContextTags})"]},
      {"graphName":"Dispatcher Threads", "promQL":["sum by (actor_system) (akka_dispatcher_active_threads{ContextTags})","sum by (actor_system) (akka_dispatcher_running_threads{ContextTags})"]}
    ]
  akka-http-exporter.json: |
    [
      {"graphName":"Responses Per Second", "promQL":["sum by (request_path)(irate(akka_http_request_path_endpoint_responses{ContextTags}[1m]))"]},
      {"graphName":"Response Time", "promQL":["max by (request_path)(akka_http_request_path_endpoint_response_time_ns{ContextTags,quantile=\"0.99\"})"]},
      {"graphName":"Connections Per Second", "promQL":["sum by (http_server)(irate(akka_http_http_server_connections{ContextTags}[1m]))"]},
      {"graphName":"Response Time 2XX 99% (ms)", "promQL":["max by (http_server)(akka_http_http_server_response_time_2xx_ns{ContextTags, quantile=\"0.99\"}) / 1000000"]},
      {"graphName":"Response Time 4XX 99% (ms)", "promQL":["max by (http_server)(akka_http_http_server_response_time_4xx_ns{ContextTags, quantile=\"0.99\"}) / 1000000"]},
      {"graphName":"Response Time 5XX 99% (ms)", "promQL":["max by (http_server)(akka_http_http_server_response_time_5xx_ns{ContextTags, quantile=\"0.99\"}) / 1000000"]}
    ]
  cassandra-exporter.json: |
    [
      {"graphName":"Storage", "promQL":["cassandra_storage_load{ContextTags}"]},
      {"graphName":"Read Latency", "promQL":["cassandra_clientrequest_latency{clientrequest='Read', ContextTags}"]},
      {"graphName":"Write Latency", "promQL":["cassandra_clientrequest_latency{clientrequest='Write', ContextTags}"]},
      {"graphName":"Total Read Latency Per Second", "promQL":["irate(cassandra_clientrequest_totallatency{clientrequest='Read', ContextTags}[1m])"]},
      {"graphName":"Total Write Latency Per Second", "promQL":["irate(cassandra_clientrequest_totallatency{clientrequest='Write', ContextTags}[1m])"]}
    ]
  cluster-exporter.json: |
    [
       {"graphName": "CPU Percent", "promQL":["node_cpu_percent"]},
       {"graphName": "Memory Available Percent", "promQL":["node_memory_usable_percent"]},
       {"graphName": "File System Free Percent", "promQL":["node_filesystem_free_percent"]},
       {"graphName": "Bytes Received Per Second", "promQL":["sum by (instance) (irate(node_network_receive_bytes[1m]))"]},
       {"graphName": "Bytes Transmitted Per Second", "promQL":["sum by (instance) (irate(node_network_transmit_bytes[1m]))"]}
    ]
  jvm-exporter.json: |
    [
      {"graphName":"Heap", "promQL":["sum by (kubernetes_pod_name)(jvm_heap_committed{ContextTags})",
                                     "sum by (kubernetes_pod_name)(jvm_heap_init{ContextTags})",
                                     "sum by (kubernetes_pod_name)(jvm_heap_max{ContextTags})",
                                     "sum by (kubernetes_pod_name)(jvm_heap_used{ContextTags})"]},
      {"graphName":"Non Heap", "promQL":["sum by (kubernetes_pod_name)(jvm_non_heap_committed{ContextTags})",
                                         "sum by (kubernetes_pod_name)(jvm_non_heap_init{ContextTags})",
                                         "sum by (kubernetes_pod_name)(jvm_non_heap_max{ContextTags})",
                                         "sum by (kubernetes_pod_name)(jvm_non_heap_used{ContextTags})"]},
      {"graphName":"Total Heap", "promQL":["sum by (kubernetes_pod_name)(jvm_total_heap_committed{ContextTags})",
                                           "sum by (kubernetes_pod_name)(jvm_total_heap_init{ContextTags})",
                                           "sum by (kubernetes_pod_name)(jvm_total_heap_max{ContextTags})",
                                           "sum by (kubernetes_pod_name)(jvm_total_heap_used{ContextTags})"]},
      {"graphName":"GC Count", "promQL":["sum by (kubernetes_pod_name)(jvm_PS_MarkSweep_count{ContextTags})",
                                         "sum by (kubernetes_pod_name)(jvm_PS_Scavenge_count{ContextTags})"]},
      {"graphName":"GC Time", "promQL":["max by (kubernetes_pod_name)(jvm_PS_MarkSweep_time{ContextTags})",
                                        "max by (kubernetes_pod_name)(jvm_PS_Scavenge_time{ContextTags})"]},
      {"graphName":"Class Loading", "promQL":["sum by (kubernetes_pod_name)(jvm_loaded{ContextTags})",
                                              "sum by (kubernetes_pod_name)(jvm_unloaded{ContextTags})"]},
      {"graphName":"Memory Pools", "promQL":["sum by (kubernetes_pod_name)(jvm_pools_Code_Cache_usage{ContextTags})",
                                             "sum by (kubernetes_pod_name)(jvm_pools_Compressed_Class_Space_usage{ContextTags})",
                                             "sum by (kubernetes_pod_name)(jvm_pools_PS_Eden_Space_usage{ContextTags})",
                                             "sum by (kubernetes_pod_name)(jvm_pools_PS_Old_Gen_usage{ContextTags})",
                                             "sum by (kubernetes_pod_name)(jvm_pools_PS_Survivor_Space_usage{ContextTags})"]}
    ]
  kafka-exporter.json: |
    [
      {"graphName":"Brokers Online", "promQL":["count(kafka_server_replicamanager_leadercount{ContextTags})"]},
      {"graphName":"Active Controllers", "promQL":["sum(kafka_controller_kafkacontroller_activecontrollercount{ContextTags})"]},
      {"graphName":"Unclean Leader Election Rate", "promQL":["sum(irate(kafka_controller_controllerstats_uncleanleaderelections_total{ContextTags}[5m]))"]},
      {"graphName":"Online Partitions", "promQL":["sum(kafka_server_replicamanager_partitioncount{ContextTags})"]},
      {"graphName":"Under Replicated Partitions", "promQL":["sum(kafka_server_replicamanager_underreplicatedpartitions{ContextTags})"]},
      {"graphName":"Offline Partitions Count", "promQL":["sum(kafka_controller_kafkacontroller_offlinepartitionscount{ContextTags})"]},
      {"graphName":"Bytes Rate (In & Out)", "promQL":[
        "sum(irate(kafka_server_brokertopicmetrics_bytesin_total{ContextTags,topic=\"\"}[1m]))",
        "sum(irate(kafka_server_brokertopicmetrics_bytesout_total{ContextTags,topic=\"\"}[1m]))"
      ]},
      {"graphName":"Total Messages In", "promQL":["sum(irate(kafka_server_brokertopicmetrics_messagesin_total{ContextTags,topic=\"\"}[1m]))"]},
      {"graphName":"Produce Request Rate (Total & Failed)", "promQL":[
        "sum(irate(kafka_server_brokertopicmetrics_totalproducerequests_total{ContextTags,topic=\"\"}[1m]))",
        "sum(irate(kafka_server_brokertopicmetrics_failedproducerequests_total{ContextTags,topic=\"\"}[1m]))"
      ]},
      {"graphName":"Fetch Request Rate (Total & Failed)", "promQL":[
        "sum(irate(kafka_server_brokertopicmetrics_totalfetchrequests_total{ContextTags,topic=\"\"}[1m]))",
        "sum(irate(kafka_server_brokertopicmetrics_failedfetchrequests_total{ContextTags,topic=\"\"}[1m]))"
      ]},
      {"graphName":"Network Processor Avg Idle Percent", "promQL":["kafka_network_socketserver_networkprocessoravgidle_percent{ContextTags}*100"]},
      {"graphName":"Request Handler Avg Idle Percent", "promQL":["kafka_server_kafkarequesthandlerpool_requesthandleravgidle_percent{ContextTags}*100"]}
    ]
  kubernetes-exporter.json: |
    [
       {"graphName": "CPU Percent", "promQL":["node_cpu_percent"]},
       {"graphName": "Memory Available Percent", "promQL":["node_memory_usable_percent"]},
       {"graphName": "File System Free Percent", "promQL":["node_filesystem_free_percent"]},
       {"graphName": "Bytes Received Per Second", "promQL":["sum by (instance) (irate(node_network_receive_bytes[1m]))"]},
       {"graphName": "Bytes Transmitted Per Second", "promQL":["sum by (instance) (irate(node_network_transmit_bytes[1m]))"]}
    ]
  lagom-exporter.json: |
    [
      {"graphName":"Circuit Breaker State", "promQL":["min by (instance,circuit_breaker) (lagom_circuit_breaker_state{ContextTags})"]},
      {"graphName":"Circuit Breaker Failures Per Second", "promQL":["sum by (instance,circuit_breaker)(irate (lagom_circuit_breaker_failure{ContextTags}[1m]))"]},
      {"graphName":"Circuit Breaker Latency 99% (ms)", "promQL":["max by (instance,circuit_breaker) (lagom_circuit_breaker_latency_ns{ContextTags, quantile=\"0.99\"}) / 1000000"]},
      {"graphName":"Circuit Breaker Throughput Per Second", "promQL":["sum by (instance,circuit_breaker)(irate (lagom_circuit_breaker_throughput{ContextTags}[1m]))"]}
    ]
  memcached-exporter.json: |
    [
      {"graphName":"Miss Ratio", "promQL":["memcached_commands_total{ContextTags, status=\"miss\"}/memcached_commands_total{ContextTags}"]},
      {"graphName":"Evictions Per Second", "promQL":["irate(memcached_items_evicted_total{ContextTags}[1m])"]},
      {"graphName":"Connections Current", "promQL":["memcached_current_connections{ContextTags}"]},
      {"graphName":"Total Connections Per Second", "promQL":["irate(memcached_connections_total{ContextTags}[1m])"]},
      {"graphName":"Items Current", "promQL":["memcached_current_items{ContextTags}"]},
      {"graphName":"Cache Free", "promQL":["memcached_current_bytes{ContextTags}/memcached_limit_bytes{ContextTags}"]},
      {"graphName":"Items Evicted Per Second", "promQL":["irate(memcached_items_evicted_total{ContextTags}[1m])"]},
      {"graphName":"Items Reclaimed Per Second", "promQL":["irate(memcached_items_reclaimed_total{ContextTags}[1m])"]},
      {"graphName":"Total Commands Per Second", "promQL":["sum (irate(memcached_commands_total{ContextTags}[1m])) by (command)"]},
      {"graphName":"Bytes Read Per Second", "promQL":["irate(memcached_read_bytes_total{ContextTags}[1m])"]},
      {"graphName":"Bytes Written Per Second", "promQL":["irate(memcached_written_bytes_total{ContextTags}[1m])"]}
    ]
  play-exporter.json: |
    [
      {"graphName":"Play Client Requests Per Second", "promQL":["sum by (http_client)(irate(play_http_client_play_client_requests{ContextTags}[1m]))"]},
      {"graphName":"Play Client Response Time", "promQL":["max by (http_client)(play_http_client_play_client_service_response_time_ns{ContextTags, quantile=\"0.99\"})"]}
    ]
  redis-exporter.json: |
    [
      {"graphName":"Redis Memory Used", "promQL":["redis_memory_used_bytes{ContextTags}"]},
      {"graphName":"Commands Processed Per Second", "promQL":["irate(redis_commands_processed_total{ContextTags}[1m])"]},
      {"graphName":"Keys Evicted Per Second", "promQL":["irate(redis_evicted_keys_total{ContextTags}[1m])"]},
      {"graphName":"Keys Evicted Per Second", "promQL":["irate(redis_evicted_keys_total{ContextTags}[1m])"]},
      {"graphName":"Connections", "promQL":["redis_connected_clients{ContextTags}"]}
    ]
  zookeeper-exporter.json: |
    [
      {"graphName":"Quorum Size", "promQL":["max(zookeeper_quorumsize{ContextTags})"]},
      {"graphName":"Alive Connections", "promQL":["sum(zookeeper_numaliveconnections{ContextTags})"]},
      {"graphName":"Number of ZNodes", "promQL":["avg(zookeeper_inmemorydatatree_nodecount{ContextTags})"]},
      {"graphName":"Number of Watchers", "promQL":["sum(zookeeper_inmemorydatatree_watchcount{ContextTags})"]},
      {"graphName":"Outstanding Requests", "promQL":["zookeeper_outstandingrequests{ContextTags}"]},
      {"graphName":"Request Latency - Minimum", "promQL":["zookeeper_minrequestlatency{ContextTags}"]},
      {"graphName":"Request Latency - Average", "promQL":["zookeeper_avgrequestlatency{ContextTags}"]},
      {"graphName":"Request Latency - Maximum", "promQL":["zookeeper_maxrequestlatency{ContextTags}"]},
      {"graphName":"Synced Followers", "promQL":["zk_synced_followers{ContextTags}"]},
      {"graphName":"Open File Descriptors", "promQL":["zk_open_file_descriptor_count{ContextTags}"]},
      {"graphName":"Pending Syncs", "promQL":["zk_pending_syncs{ContextTags}"]}
    ]
  

# Job to add data-source to grafana
# 1. wait till grafana is up
# 2. add prometheus data source to grafana-server.
# Note: The IPaddress here is the address provided by minikube service list
# this IP address is not static, even for minikube
# Please note, browser should be able reach this IP-Address, it cannot be some internal IP address within kubernetes.
# like prometheus-server.lightbend will not work
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: grafana-datasource-cm
data:
  prometheus-server-datasource.yaml: |
    # config file version
    apiVersion: 1

    # list of datasources to insert/update depending
    datasources:
      # <string, required> name of the datasource. Required
    - name: Cinnamon Prometheus
      # <string, required> datasource type. Required
      type: prometheus
      # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
      access: proxy
      # <int> org id. will default to orgId 1 if not specified
      orgId: 1
      # <string> url
      url: http://prometheus-server
      #
      basicAuth: false
      #
      isDefault: true
      editable: true

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: grafana
    component: "server"
  name: grafana-server
spec:
  ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
    component: "server"
  type: "ClusterIP"


---
apiVersion: v1
kind: Service
metadata:
  name: expose-grafana
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
    nodePort: 30030
  selector:
    app: grafana
    component: server
  type: NodePort


---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana-server
  labels:
    app: grafana
    component: server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
        component: server
    spec:
      

      imagePullSecrets:
      - name: commercial-credentials

      containers:
      - image: lightbend-docker-commercial-registry.bintray.io/enterprise-suite/es-grafana:latest
        imagePullPolicy: Always
        name: grafana-server
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
        env:
          # The following env variables set up anonymous access to grafana with editor access.
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: "Editor"
          - name: GF_SERVER_ROOT_URL
            value: "/service/grafana/"
          - name: GF_SERVER_ROUTER_LOGGING
            value: "true"
        ports:
          - containerPort: 3000
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "echo \"Waiting for grafana to enable cinnamon plugin...\"; until curl --output /dev/null --silent --head --fail curl http://127.0.0.1:3000; do echo -n '.' ;  sleep 2; done ; curl -XPOST 'admin:admin@127.0.0.1:3000/api/plugins/cinnamon-prometheus-app/settings?enabled=true' -d '' || true" ]
        readinessProbe:
          httpGet:
            path: /login
            port: 3000
        volumeMounts:
        - name: grafana-dashboards
          mountPath: /usr/share/grafana/public/conf
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources/
      volumes:
      - name: grafana-dashboards
        configMap:
          name: exporter-graphs-cm
      - name: grafana-datasources
        configMap:
          name: grafana-datasource-cm

---
# Source: enterprise-suite-latest/templates/node-exporter.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-node-exporter
---
apiVersion: apps/v1beta2
kind: DaemonSet
metadata:
  labels:
    app: prometheus
    component: node-exporter
  name: prometheus-node-exporter
spec:
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app: prometheus
      component: node-exporter
  template:
    metadata:
      labels:
        app: prometheus
        component: node-exporter
    spec:
      serviceAccountName: "prometheus-node-exporter"
      
      containers:
        - name: prometheus-node-exporter
          image: "prom/node-exporter:v0.15.2"
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --collector.netdev.ignored-devices=^veth.*
            - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|host|var)($|/)
            - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
            - --no-collector.netstat
            - --no-collector.vmstat
          ports:
            - name: metrics
              containerPort: 9100
              hostPort: 9100
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
      hostNetwork: true
      hostPID: true
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    app: prometheus
    component: "node-exporter"
  name: prometheus-node-exporter
spec:
  clusterIP: None
  ports:
    - name: metrics
      port: 9100
      protocol: TCP
      targetPort: 9100
  selector:
    app: prometheus
    component: "node-exporter"
  type: "ClusterIP"


---
# Source: enterprise-suite-latest/templates/kube-state-metrics.yaml

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-kube-state-metrics
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs: ["list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs: ["list", "watch"]
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: prometheus-kube-state-metrics
  namespace: lightbend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-kube-state-metrics

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: prometheus
    component: kube-state-metrics
  name: prometheus-kube-state-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: kube-state-metrics
  template:
    metadata:
      labels:
        app: prometheus
        component: kube-state-metrics
    spec:
      
      serviceAccountName: prometheus-kube-state-metrics
      containers:
        - name: prometheus-kube-state-metrics
          image: "gcr.io/google_containers/kube-state-metrics:v1.2.0"
          args:
            - --port=8080
            - --telemetry-port=8081
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          ports:
            - name: metrics
              containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    app: prometheus
    component: "kube-state-metrics"
  name: prometheus-kube-state-metrics
spec:
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: prometheus
    component: "kube-state-metrics"
  type: "ClusterIP"

---
# Source: enterprise-suite-latest/templates/prometheus.yaml
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-server

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: lightbend

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: prometheus
    component: server
  name: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: server
  template:
    metadata:
      labels:
        app: prometheus
        component: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: prometheus-server

      

      initContainers:
        - name: setup
          image: alpine
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
          args:
            - mkdir -p /etc/config/rules;
              cp /etc/bare/prometheus.yml /etc/config/
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
            - mountPath: /etc/bare
              name: bare-prometheus

      imagePullSecrets:
        - name: commercial-credentials

      containers:
        - name: es-monitor-api
          image: lightbend-docker-commercial-registry.bintray.io/enterprise-suite/es-monitor-api:latest
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          args:
            - --configPath=/etc/config/
            - --storagePath=/monitor-data/
            - --staticConfig=/etc/es-monitor-api/static-rules.yml
            - --bootstrapMonitorsFile=/etc/es-monitor-api/bootstrap-monitors.json
            - --prometheusTemplate=/etc/es-monitor-api/prometheus.yml
            - --prometheusDomain=prometheus.io
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: es-monitor-api-volume
              mountPath: /etc/es-monitor-api
            - name: monitor-data-volume
              mountPath: /monitor-data
          ports:
            - containerPort: 8180
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8180
              scheme: HTTP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8180
              scheme: HTTP
            initialDelaySeconds: 30

        - name: prometheus-server
          image: prom/prometheus:v2.2.1
          resources:
            requests:
              cpu: 100m
              memory: 250Mi
          args:
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            timeoutSeconds: 30
            initialDelaySeconds: 30
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
            - name: prometheus-data-volume
              mountPath: /data

      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          emptyDir: {}
        - name: es-monitor-api-volume
          configMap:
            name: es-monitor-api
        - name: monitor-data-volume
          emptyDir: {}
        - name: prometheus-data-volume
          emptyDir: {}
        - name: bare-prometheus
          configMap:
            name: bare-prometheus

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
spec:
  ports:
    - port: 80
      targetPort: 9090
  selector:
    app: prometheus
    component: server

---
apiVersion: v1
kind: Service
metadata:
  name: es-monitor-api
spec:
  ports:
    - port: 80
      targetPort: 8180
  selector:
    app: prometheus
    component: server


---
apiVersion: v1
kind: Service
metadata:
  name: expose-prometheus
spec:
  ports:
  - port: 9090
    protocol: TCP
    targetPort: 9090
    nodePort: 30090
  selector:
    app: prometheus
    component: server
  type: NodePort


---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: server
  name: bare-prometheus
data:
  prometheus.yml: |-
    # this is a placeholder to keep prometheus running while it waits the real config
    global:
      scrape_interval:     1m
      evaluation_interval: 1m
    scrape_configs:
      - job_name: wait
        static_configs:
          - targets: ['localhost:9090']
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: .+
          action: drop

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: server
  name: es-monitor-api
data:
  bootstrap-monitors.json: |
    {
      "monitors": [
        {
          "model": "threshold",
          "parameters": {
            "name": "node_high_cpu",
            "metric": "node_cpu_percent",
            "comparator": ">=",
            "threshold": "99",
            "window": "2m",
            "confidence": "1",
            "severity": "warning",
            "summary": "cpu saturated",
            "description": "cpu on {{$labels.instance}} over 99% busy",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "node_memory_pressure",
            "metric": "node_memory_usable_percent",
            "comparator": "<",
            "threshold": "5",
            "window": "5m",
            "confidence": "1",
            "severity": "warning",
            "summary": "memory pressure",
            "description": "{{$labels.instance}} has low usable memory",
            "monitorType": ""
          }
        },
        {
          "model": "predict",
          "parameters": {
            "name": "node_disk_filling",
            "metric": "node_filesystem_free_percent",
            "period": "1h",
            "seconds": "28800",
            "comparator": "<",
            "threshold": "0",
            "window": "15m",
            "confidence": "1",
            "severity": "warning",
            "summary": "disk filling",
            "description": "{{$labels.instance}} will fill disk in {{$labels.prediction}}",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "node_network_errors",
            "metric": "node_network_error_rate",
            "comparator": ">",
            "threshold": "0",
            "window": "5m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "network errors",
            "description": "{{$labels.instance}} has network errors",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "kube_node_pressure",
            "metric": "kube_node_pressure",
            "comparator": ">",
            "threshold": "0",
            "window": "5m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "kube node pressure",
            "description": "{{$labels.node_name}} is in kubernetes condition {{$labels.condition}}",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "restarts",
            "metric": "kube_pod_container_restarts_rate",
            "comparator": ">",
            "threshold": "0",
            "window": "10m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "container restarting rapidly",
            "description": "container {{$labels.container}} in pod {{$labels.pod}} of {{$labels.es_workload}} restarting rapidly",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "kube_pod_not_ready",
            "metric": "kube_pod_ready",
            "comparator": "<",
            "threshold": "1",
            "window": "5m",
            "confidence": "0.5",
            "severity": "critical",
            "summary": "pod not ready",
            "description": "pod {{$labels.pod}} on {{$labels.es_workload}} not ready",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "kube_pod_not_running",
            "metric": "kube_pod_not_running",
            "comparator": ">",
            "threshold": "0",
            "window": "10m",
            "confidence": "0.75",
            "severity": "warning",
            "summary": "pod not running",
            "description": "pod {{$labels.pod}} on {{$labels.es_workload}} not running",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "kube_workload_generation_lag",
            "metric": "kube_workload_generation_lag",
            "comparator": ">",
            "threshold": "0",
            "window": "10m",
            "confidence": "1",
            "severity": "warning",
            "summary": "es_workload not updating",
            "description": "es_workload {{$labels.es_workload}} has not updated for 10 minutes",
            "monitorType": ""
          }
        },
        {
          "model": "growth",
          "parameters": {
            "name": "kafka_consumergroup_lag",
            "metric": "kafka_consumergroup_lag",
            "period": "15m",
            "minslope": "1",
            "window": "5m",
            "confidence": "1",
            "severity": "warning",
            "summary": "consumergroup falling behind",
            "description": "{{$labels.consumergroup}} is falling behind",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "scrape_time",
            "metric": "scrape_duration_seconds",
            "period": "15m",
            "numsigma": "3",
            "minval": "3",
            "window": "15m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "scrape time anomalous",
            "description": "{{$labels.instance}} has anomalous scrape_duration_seconds",
            "monitorType": ""
          }
        },
        {
          "model": "growth",
          "parameters": {
            "name": "akka_inbox_growth",
            "metric": "akka_actor_mailbox_size{quantile=\"0.5\"}",
            "period": "15m",
            "minslope": "0.1",
            "window": "5m",
            "confidence": "1",
            "severity": "critical",
            "summary": "actor inbox growing",
            "description": "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has a growing inbox",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "akka_processing_time",
            "metric": "akka_actor_processing_time_ns{quantile=\"0.5\"}",
            "period": "15m",
            "numsigma": "2",
            "minval": "100000000",
            "window": "15m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "actor processing time is anomalous",
            "description": "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has unusual processing time",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "prometheus_notifications_dropped",
            "metric": "prometheus_notifications_dropped_rate",
            "comparator": ">",
            "threshold": "0",
            "window": "10m",
            "confidence": "0.25",
            "severity": "warning",
            "summary": "Prometheus dropping notifications",
            "description": "Prometheus dropping alerts sent to Alertmanager",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "prometheus_notification_queue",
            "metric": "prometheus_notification_queue_percent",
            "comparator": ">",
            "threshold": "50",
            "window": "10m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "Prometheus alert queue filling",
            "description": "Prometheus alert queue is staying over 50% full",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "prometheus_rule_evaluation_failures",
            "metric": "prometheus_rule_evaluation_failures_rate",
            "comparator": ">",
            "threshold": "0",
            "window": "10m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Prometheus rule failures",
            "description": "Prometheus has {{$value}} rules failing",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "prometheus_target_too_many_metrics",
            "metric": "prometheus_target_scrapes_exceeded_sample_limit_rate",
            "comparator": ">",
            "threshold": "0",
            "window": "10m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Prometheus target over limit",
            "description": "Prometheus target at {{labels.instance}} has too many metrics",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "prometheus_tsdb_reloads_failures",
            "metric": "prometheus_tsdb_reloads_failures_rate",
            "comparator": ">=",
            "threshold": "1",
            "window": "10m",
            "confidence": "1",
            "severity": "critical",
            "summary": "Prometheus tsdb reload failing",
            "description": "Prometheus had {{$value}} reload failures",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "prometheus_target_down",
            "metric": "up",
            "comparator": "!=",
            "threshold": "1",
            "window": "10m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "metrics target down",
            "description": "cannot connect to {{$labels.instance}} metrics endpoint for {{$labels.job}} data",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "prometheus_config_reload_failed",
            "metric": "prometheus_config_last_reload_successful",
            "comparator": "!=",
            "threshold": "1",
            "window": "10m",
            "confidence": "1",
            "severity": "critical",
            "summary": "prometheus bad config",
            "description": "current config for prometheus has errors, will prevent restarts",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "prometheus_scrape_time",
            "metric": "prometheus_target_sync_percent",
            "comparator": ">",
            "threshold": "75",
            "window": "10m",
            "confidence": "1",
            "severity": "warning",
            "summary": "prometheus has long scrape times",
            "description": "prometheus is taking {{$value}}% of the {{$labels.interval}} interval to get {{$labels.scrape_job}} metrics from {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "zookeeper_latency",
            "metric": "zk_avg_latency",
            "period": "15m",
            "numsigma": "2",
            "minval": "10",
            "window": "15m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "Zookeeper Latency",
            "description": "ZooKeeper latency is not normal in {{$labels.es_workload}} on {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "zookeeper_connections",
            "metric": "zk_num_alive_connections",
            "period": "15m",
            "numsigma": "2",
            "minval": "10",
            "window": "15m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Zookeeper live connections is not normal",
            "description": "Zookeeper live connection in {{$labels.es_workload}} is not normal on {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "zookeeper_pending_syncs",
            "metric": "zk_pending_syncs",
            "comparator": ">",
            "threshold": "0",
            "window": "10m",
            "confidence": "1",
            "severity": "critical",
            "summary": "Zookeeper pending-syncs is not normal",
            "description": "Zookeeper Pending syncs in {{$labels.es_workload}} is greater than 0.",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "zookeeper_open_file_descriptor",
            "metric": "zk_open_file_descriptor_count",
            "period": "15m",
            "numsigma": "2",
            "minval": "10",
            "window": "15m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Zookeeper open file descriptor growth",
            "description": "Zookeeper open file descriptors in ${{labels.es_workload}} is not normal in ${{labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "cassandra_write_latency",
            "metric": "cassandra_clientrequest_write_latency",
            "period": "15m",
            "numsigma": "2",
            "minval": "10",
            "window": "15m",
            "confidence": "0.5",
            "severity": "critical",
            "summary": "Cassandra Write Latency",
            "description": "Cassandra write latency is not normal on {{$labels.es_workload}} in {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "cassandra_read_latency",
            "metric": "cassandra_clientrequest_read_latency",
            "period": "15m",
            "numsigma": "2",
            "minval": "10",
            "window": "15m",
            "confidence": "0.5",
            "severity": "critical",
            "summary": "Cassandra Read Latency",
            "description": "Cassandra read latency is not normal on {{$labels.es_workload}} in {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "redis_keyspace_miss",
            "metric": "redis_keyspace_miss_ratio",
            "period": "15m",
            "numsigma": "2",
            "minval": "1",
            "window": "10m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Redis key space miss ratio growth",
            "description": "Observing shifts in Redis key space ratio on ${{labels.es_workload}} in ${{labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "redis_evictions",
            "metric": "redis_evicted_keys_total",
            "period": "15m",
            "numsigma": "2",
            "minval": "1",
            "window": "10m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Redis evictions growing",
            "description": "Redis evictions on {{$labels.es_workload}} are growing in {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "redis_commands_processed",
            "metric": "redis_commands_processed_total",
            "period": "10m",
            "numsigma": "3",
            "minval": "10",
            "window": "5m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Redis command processed",
            "description": "Redis commands processed on {{$labels.es_workload}} is not normal in ${{labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "redis_connections",
            "metric": "redis_connected_clients",
            "period": "15m",
            "numsigma": "2",
            "minval": "10",
            "window": "15m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Redis client connections is not normal",
            "description": "Redis client connections on {{$labels.es_workload}} is not normal in {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "kafka_incoming_messages",
            "metric": "kafka_incoming_messages_rate",
            "period": "5m",
            "numsigma": "2",
            "minval": "10",
            "window": "10m",
            "confidence": "1",
            "severity": "critical",
            "summary": "Kafka incoming message rate is not normal",
            "description": "Kafka incoming message rate on ${{labels.es_workload}} is not normal for topic ${{labels.topic}}",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "kafka_offline_partition",
            "metric": "kafka_controller_kafkacontroller_offlinepartitionscount",
            "comparator": ">",
            "threshold": "0",
            "window": "5m",
            "confidence": "1",
            "severity": "critical",
            "summary": "Kafka offline partition is not zero",
            "description": "Kafka offline partition is high on ${{labels.es_workload}} in ${{labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "kafka_under_replicated_partitions",
            "metric": "kafka_server_replicamanager_underreplicatedpartitions",
            "comparator": ">",
            "threshold": "0",
            "window": "5m",
            "confidence": "1",
            "severity": "critical",
            "summary": "Kafka under replicated partitions is up",
            "description": "Kafka under replicated partitions is high on ${{labels.es_workload}} in ${{labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "memcached_miss_ratio",
            "metric": "memcached_miss_ratio",
            "period": "15m",
            "numsigma": "2",
            "minval": "10",
            "window": "15m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Memcached miss ratio shifts",
            "description": "Memcached miss ratio in {{$labels.es_workload}} is not normal on {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "memcached_current_connections",
            "metric": "memcached_current_connections",
            "period": "15m",
            "numsigma": "2",
            "minval": "10",
            "window": "15m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Memcached connections are changing",
            "description": "Memcached connections in {{$labels.es_workload}} is not normal on {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "memcached_evictions",
            "metric": "memcached_evictions_rate",
            "period": "15m",
            "numsigma": "2",
            "minval": "1",
            "window": "15m",
            "confidence": "1",
            "severity": "warning",
            "summary": "Memcached evictions shifts",
            "description": "Memcached evictions in {{$labels.es_workload}} is not normal on {{$labels.instance}}",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "akka_http_server_response_time",
            "metric": "akka_http_http_server_response_time_ns{quantile=\"0.5\"}",
            "period": "15m",
            "numsigma": "2",
            "minval": "100000000",
            "window": "15m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "HTTP server response time is anomalous",
            "description": "{{$labels.app}} on {{$labels.instance}} has unusual response time",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "akka_http_client_response_time",
            "metric": "akka_http_http_client_http_client_service_response_time_ns{quantile=\"0.5\"}",
            "period": "15m",
            "numsigma": "2",
            "minval": "100000000",
            "window": "15m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "HTTP client response time is anomalous",
            "description": "{{$labels.app}} on {{$labels.instance}} has unusual response time",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "akka_http_server_5xx",
            "metric": "akka_http_http_server_responses_5xx_rate",
            "comparator": ">",
            "threshold": "0",
            "window": "5m",
            "confidence": "1.0",
            "severity": "warning",
            "summary": "HTTP 5xx errors",
            "description": "HTTP server at {{$labels.instance}} has 5xx errors",
            "monitorType": ""
          }
        },
        {
          "model": "sma",
          "parameters": {
            "name": "play_http_client_response_time",
            "metric": "play_http_client_play_client_service_response_time_ns{quantile=\"0.5\"}",
            "period": "15m",
            "numsigma": "2",
            "minval": "100000000",
            "window": "15m",
            "confidence": "0.5",
            "severity": "warning",
            "summary": "HTTP client response time is anomalous",
            "description": "{{$labels.app}} on {{$labels.instance}} has unusual response time",
            "monitorType": ""
          }
        },
        {
          "model": "threshold",
          "parameters": {
            "name": "lagom_circuit_breaker_state",
            "metric": "lagom_circuit_breaker_state",
            "comparator": "<",
            "threshold": "3",
            "window": "1m",
            "confidence": "5e-324",
            "severity": "critical",
            "summary": "Circuit breaker tripped",
            "description": "Circuit breaker {{$labels.circuit_breaker}} tripped on {{$labels.instance}}",
            "monitorType": ""
          }
        }
      ]
    }
  prometheus.yml: |
    {{/*
       * Note to Helm devs: this is NOT a Helm template, but rather a plain go template used
       * in es-monitor-api to generate the final prometheus.yml.
       * dot2underscore is a function in es-monitor-api that replaces "." with "_"
       */}}
    global:
      # dev mode
      scrape_interval: 10s
      evaluation_interval: 10s
  
    rule_files:
      - /etc/config/rules/*.yaml
  
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace,__meta_kubernetes_pod_label_app,__meta_kubernetes_pod_label_component,__meta_kubernetes_pod_container_port_number]
          regex: lightbend;prometheus;alertmanager;[0-9]+
          action: keep
  
    scrape_configs:
  
      # Container metrics from kubelet cadvisor endpoint
  
      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  
        kubernetes_sd_configs:
          - role: node
  
        honor_labels: true
  
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node_name
          - source_labels: [__meta_kubernetes_node_address_InternalIP]
            target_label: node_ip
  
        metric_relabel_configs:
          - source_labels: [pod_name]
            target_label: kubernetes_pod_name
          - regex: pod_name
            action: labeldrop
          # pause containers have all the network stats for a pod
          - source_labels: [container_name, __name__]
            regex: POD;container_(network).*
            target_label: container_name
          # drop all other pause container stats
          - source_labels: [container_name]
            regex: POD
            action: drop
          # drop system containers with no name
          - source_labels: [container_name]
            regex: ^$
            action: drop
          # drop high cardinality debug metrics
          - source_labels: [__name__]
            regex: container_(network_tcp_usage_total|tasks_state|cpu_usage_seconds_total|memory_failures_total|network_udp_usage_total)
            action: drop
  
      # kube-state-metrics
  
      - job_name: 'kube-state-metrics'
  
        kubernetes_sd_configs:
          - role: endpoints
  
        honor_labels: true
  
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex: prometheus-kube-state-metrics
            action: keep
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
  
        # es_workload labels:
        metric_relabel_configs:
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'ReplicaSet;(.+)-[^-]+-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'StatefulSet;(.+)-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'DaemonSet;(.+)-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'Job;(.+)-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: 'ReplicationController;(.+)-[^-]+;'
            target_label: es_workload
          - source_labels: [created_by_kind, pod, es_workload]
            regex: '.none.;(.+);'
            target_label: es_workload
          - source_labels: [deployment, es_workload]
            regex: '(.+);'
            target_label: es_workload
          - source_labels: [daemonset, es_workload]
            regex: '(.+);'
            target_label: es_workload
    {{ .MonitorTypeRules | indent 6 }}
  
  
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
  
        honor_labels: true
  
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex: prometheus-node-exporter
            action: keep
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
  
      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `{{ .PrometheusDomain }}/scrape`: Only scrape services that have a value of `true`
      # * `{{ .PrometheusDomain }}/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `{{ .PrometheusDomain }}/path`: If the metrics path is not `/metrics` override this.
      # * `{{ .PrometheusDomain }}/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
  
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: endpoints
  
        honor_labels: true
  
        relabel_configs:
          # these have dedicated scrape sections:
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex: prometheus-node-exporter
            action: drop
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex:  prometheus-kube-state-metrics
            action: drop
          # _scrape _scheme _path _port annotation triggers:
          - source_labels: [__meta_kubernetes_service_annotation_{{ dot2underscore .PrometheusDomain }}_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_{{ dot2underscore .PrometheusDomain }}_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_{{ dot2underscore .PrometheusDomain }}_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_{{ dot2underscore .PrometheusDomain }}_port]
            action: replace
            target_label: __address__
            regex: (.+)(?::\d+);(\d+)
            replacement: $1:$2
          # metadata labels
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - source_labels: [__meta_kubernetes_pod_label_pod_template_hash, __meta_kubernetes_pod_name, es_workload]
            action: replace
            regex: '[^;]+;(.*)-[^-]+-[^-]+;'
            target_label: es_workload
          - source_labels: [__meta_kubernetes_pod_label_statefulset_kubernetes_io_pod_name, es_workload]
            action: replace
            regex: '(.*)-[0-9]+;'
            target_label: es_workload
  
        metric_relabel_configs:
    {{ .MonitorTypeRules | indent 6 }}
  
  
      # Scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `{{ .PrometheusDomain }}/scrape`: Only scrape pods that have a value of `true`
      # * `{{ .PrometheusDomain }}/path`: If the metrics path is not `/metrics` override this.
      # * `{{ .PrometheusDomain }}/port`: Scrape the pod on the indicated port instead of all ports by default.
      - job_name: 'kubernetes-pods'
  
        kubernetes_sd_configs:
          - role: pod
  
        honor_labels: true
  
        relabel_configs:
  
          # Only scrape pods with prometheus.io/scrape=true.
          - source_labels: [__meta_kubernetes_pod_annotation_{{ dot2underscore .PrometheusDomain }}_scrape]
            action: keep
            regex: true
  
          # Set scrape path from prometheus.io/path.
          - source_labels: [__meta_kubernetes_pod_annotation_{{ dot2underscore .PrometheusDomain }}_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
  
          # Keep only the ports ending in the suffix `metrics` if prometheus.io/port is unspecified.
          - source_labels: [__meta_kubernetes_pod_annotation_{{ dot2underscore .PrometheusDomain }}_port, __meta_kubernetes_pod_container_port_name]
            action: keep
            regex: ^(.+;.*)|(;.*metrics)$
  
          # Set port from prometheus.io/port.
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_{{ dot2underscore .PrometheusDomain }}_port]
            action: replace
            regex: (.+):(?:\d+);(\d+)
            replacement: ${1}:${2}
            target_label: __address__
  
          # Copy all labels from the pod to the scraped metrics.
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
  
          # Set the namespace label from metadata.
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
  
          # Set the kubernetes_pod_name label from metadata.
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
  
          # Set the node_name label from metadata.
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
  
          # Set the node_ip label from metadata.
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
  
          # Set the workload label from pod name.
          - source_labels: [__meta_kubernetes_pod_label_pod_template_hash, __meta_kubernetes_pod_name, es_workload]
            action: replace
            regex: '[^;]+;(.*)-[^-]+-[^-]+;'
            target_label: es_workload
  
          # Set the workload label from statefulset if pod name was unable to set it.
          - source_labels: [__meta_kubernetes_pod_label_statefulset_kubernetes_io_pod_name, es_workload]
            action: replace
            regex: '(.*)-[0-9]+;'
            target_label: es_workload
  
        metric_relabel_configs:
    {{ .MonitorTypeRules | indent 6 }}
  static-rules.yml: |
    - record: node_cpu_percent
      expr: 100 - avg by (instance) (irate(node_cpu{mode="idle"}[5m]) * 100)
  
    - record: node_memory_usable_percent
      expr: avg by (instance) (node_memory_MemAvailable / node_memory_MemTotal) * 100
  
    - record: node_filesystem_free_percent
      expr: avg by (device, instance) ((node_filesystem_free{device=~"/.*"} / node_filesystem_size * 100) and (node_filesystem_size > 0))
  
    - record: node_network_error_rate
      expr: sum by(instance) (rate(node_network_transmit_errs[5m]) + rate(node_network_receive_errs[5m]) + rate( node_network_receive_drop[5m]) + rate(node_network_transmit_drop[5m]))
  
    - record: kube_node_pressure
      expr: avg by (condition, node_ip, node_name) (kube_node_status_condition{condition!="Ready", status="true"})
  
    - record: kube_pod_ready
      expr: avg by (node_ip, node_name, namespace, pod, es_monitor_type) (kube_pod_status_ready{condition="true"}) * on (pod) group_left(es_workload, es_monitor_type) kube_pod_info
  
    - record: kube_pod_container_restarts_rate
      expr: rate(kube_pod_container_status_restarts_total[1m]) * on (pod) group_left(es_workload, es_monitor_type) kube_pod_info
  
    - record: container_starts_total
      expr: sum by (es_workload, namespace, es_monitor_type) (1 + kube_pod_container_status_restarts_total * on (pod) group_left(es_workload, es_monitor_type) kube_pod_info)
  
    - record: kube_pod_failed
      expr: kube_pod_status_phase{phase="Failed"} * on (pod) group_left(es_workload, es_monitor_type) kube_pod_info
  
    - record: kube_pod_not_running
      expr: max without (phase) (kube_pod_status_phase{phase=~"Pending|Unknown"} * on (pod) group_left(es_workload, es_monitor_type) kube_pod_info)
  
    - record: kube_workload_generation_lag
      expr: avg by (es_workload, namespace, es_monitor_type) (kube_deployment_metadata_generation - kube_deployment_status_observed_generation)
  
    - record: kube_workload_generation_lag
      expr: avg by (es_workload, namespace, es_monitor_type) (kube_daemonset_status_desired_number_scheduled - kube_daemonset_status_number_ready)
  
    - record: prometheus_notification_queue_percent
      expr: 100 * prometheus_notifications_queue_length / prometheus_notifications_queue_capacity
  
    - record: prometheus_target_sync_percent
      expr: 100 * prometheus_target_sync_length_seconds{quantile="0.99"} / on (job,instance) group_left(interval) prometheus_target_interval_length_seconds{quantile="0.01"}
  
    - record: prometheus_notifications_dropped_rate
      expr: rate(prometheus_notifications_dropped_total[10m])
  
    - record: prometheus_rule_evaluation_failures_rate
      expr: rate(prometheus_rule_evaluation_failures_total[10m])
  
    - record: prometheus_target_scrapes_exceeded_sample_limit_rate
      expr: rate(prometheus_target_scrapes_exceeded_sample_limit_total[10m])
  
    - record: prometheus_tsdb_reloads_failures_rate
      expr: rate(prometheus_tsdb_reloads_failures_total[10m])
  
    - record: akka_processing_time_seconds
      expr: akka_actor_processing_time_ns{quantile="0.5"} / 1000000000
  
    - record: zk_open_file_ratio
      expr: (zk_open_file_descriptor_count/zk_max_file_descriptor_count) * 100
  
    - record: redis_keyspace_miss_ratio
      expr: (redis_keyspace_misses_total/redis_keyspace_hits_total) * 100
  
    - record: kafka_incoming_messages_rate
      expr: sum without (instance) (rate(kafka_server_brokertopicmetrics_messagesin_total[5m]))
  
    - record: kafka_active_controllers
      expr: sum by (namespace, es_workload, es_monitor_type) (kafka_controller_kafkacontroller_activecontrollercount)
  
    - record: memcached_miss_ratio
      expr: (sum without(command, status) (memcached_commands_total{status="miss"})/sum without(command, status) (memcached_commands_total)) * 100
  
    - record: memcached_evictions_rate
      expr: rate(memcached_items_evicted_total[5m])
  
    - record: akka_http_http_server_responses_5xx_rate
      expr: rate(akka_http_http_server_responses_5xx[5m])
  

---
# Source: enterprise-suite-latest/templates/alertmanager.yaml
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: prometheus
    component: alertmanager
  name: prometheus-alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: alertmanager
  template:
    metadata:
      labels:
        app: prometheus
        component: alertmanager
    spec:
      
      serviceAccountName: default
      containers:
        - name: prometheus-alertmanager
          image: prom/alertmanager:v0.15.1
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          env:
          args:
            - --config.file=/etc/config/alertmanager.yml
            - --storage.path=/data

          ports:
            - containerPort: 9093
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9093
            timeoutSeconds: 30
            initialDelaySeconds: 30

          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: data-volume
              mountPath: /data

        - name: prometheus-alertmanager-configmap-reload
          image: jimmidyson/configmap-reload:v0.2.2
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://localhost:9093/-/reload
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

      volumes:
        - name: config-volume
          configMap:
            name: alertmanager-default
        - name: data-volume
          emptydir: {}


---
apiVersion: v1
kind: Service
metadata:
  name: expose-alertmanager
spec:
  ports:
  - port: 9093
    protocol: TCP
    targetPort: 9093
    nodePort: 30093
  selector:
    app: prometheus
    component: alertmanager
  type: NodePort


---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
spec:
  ports:
  - port: 9093
    targetPort: 9093
  selector:
    app: prometheus
    component: alertmanager
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: alertmanager
  name: alertmanager-default
data:
  alertmanager.yml: |
    # Example Lightbend Console Alertmanager config.
  
    global:
  
    # Routing rules.
    route:
      receiver: slack
      # Resend unresolved alerts at this interval.
      repeat_interval: 4h
      # Wait for any other alerts in the same group before sending.
      group_wait: 30s
      # Wait before sending a new alert for a group.
      group_interval: 5m
      # Group alerts by namespace and workload.
      group_by: [namespace, es_workload]
      routes:
      - match:
          severity: warning
        receiver: slack
      - match:
          severity: critical
        receiver: slack
        continue: true
      - match:
          severity: critical
        receiver: pagerduty
  
    # Don't alert on warnings if the same alert is already critical.
    inhibit_rules:
    - source_match:
        severity: critical
      target_match:
        severity: warning
      equal: [alertname]
  
    templates:
    # Slack notification templates.
    - '/etc/config/slack.tmpl'
  
    # Receivers.
    receivers:
    - name: slack
      slack_configs:
      # Use Slack integrations to find the webhook.
      - api_url: https://slack.localhost/services/somewhere
        channel: '#my-alerts'
        title: '{{ template "title.slack" . }}'
        text: '{{ template "text.slack" . }}'
        send_resolved: true
  
    - name: pagerduty
      pagerduty_configs:
      - url: https://pagerduty.localhost/api
        routing_key: my_secret_routing_key
        service_key: my_secret_service_key
  slack.tmpl: |
    {{ define "title.slack" }}{{ .GroupLabels.namespace}}/{{ .GroupLabels.es_workload }} [{{ .Status | toUpper }}][{{ .CommonLabels.severity | toUpper }}]{{ end }}
    {{ define "text.slack" }}{{ range $index, $element := .Alerts }}_{{ .Annotations.summary }}_
        {{ .Annotations.description }}
    {{ end }}{{- end -}}
  

---
# Source: enterprise-suite-latest/templates/es-console.yaml

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: es-console
spec:
  template:
    metadata:
      labels:
        run: es-console
    spec:
      

      imagePullSecrets:
      - name: commercial-credentials

      containers:
      - name: dnsmasq
        image: "janeczku/go-dnsmasq:release-1.0.7"
        args:
          - --listen
          - "127.0.0.1:5353"
          - --verbose
          - --enable-search
      - name: es-console
        image: lightbend-docker-commercial-registry.bintray.io/enterprise-suite/es-console:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nginx/conf.d

      volumes:
      - name: config-volume
        configMap:
          name: es-console


---
apiVersion: v1
kind: Service
metadata:
  name: expose-es-console
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
    nodePort: 30080
  selector:
    run: es-console
  type: NodePort


---
apiVersion: v1
kind: Service
metadata:
  name: console-server
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    run: es-console
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: es-console
data:
  default.conf: |-
    server {
      listen 8080;
      server_name localhost;
      set $base /usr/share/nginx/html;

      # use external resolver to lookup backends, cache for 30 seconds

      resolver 127.0.0.1:5353 ipv6=off valid=30s;

      set $prometheus "prometheus-server";
      set $monitorapi "es-monitor-api";
      set $grafana "grafana-server";
      set $alertmanager "alertmanager";

      # nginx config primer:
      # location ~ (regex.*)(matchers.*) { regex matchers become $1 and $2 in the block }
      #   nginx uses longest path match to decide which location handler to use
      #   the result of a location handler can then match and enter another location handler
      # proxy_pass http://$variable triggers re-resolve mode, otherwise would have fixed IP
      # proxy_redirect 'match' 'replace'
      #   magic 'replace' value ' $1/' with a space prefix tells nginx to not add server and port
      # sub_filter 'match' 'replace'
      #   rewrites backend content, which we use for inserting the base path
      # proxie_cookie_path 'match' 'replace'
      #   fixes session cookie Path attribute, for Grafana

      # proxy_pass backends with dynamic base url

      sub_filter_once off;

      set $nocache 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';

      location ~ (.*/service/prometheus)(/.*) {
        proxy_pass http://$prometheus$2$is_args$args;
        sub_filter '="/' '="$1/';
        sub_filter 'PATH_PREFIX = ""' 'PATH_PREFIX = "$1"';
        proxy_redirect '/' ' $1/';
      }

      location ~ (.*/service/es-monitor-api)(/.*) {
        proxy_pass http://$monitorapi$2$is_args$args;
        proxy_redirect '/' ' $1/';
      }

      location ~ (.*/service/grafana)(/.*) {
        proxy_pass http://$grafana:3000$2$is_args$args;
        sub_filter_types *;
        sub_filter '/service/grafana' '$1';
        proxy_cookie_path '/service/grafana' '$1';
        proxy_redirect '/' ' $1/';
      }

      location ~ (.*/service/alertmanager)(/.*) {
        proxy_pass http://$alertmanager:9093$2$is_args$args;
        proxy_redirect '/' ' $1/';
      }

      # our injected plugin should never cache...
      location ~ (.*/service/grafana)(/dashboard/script/exporter-async.js) {
        proxy_pass http://$grafana:3000$2$is_args$args;
        sub_filter_types *;
        sub_filter '/service/grafana' '$1';
        proxy_cookie_path '/service/grafana' '$1';
        proxy_redirect '/' ' $1/';
        # no-cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control $nocache;
        if_modified_since off;
        expires off;
        etag off;
      }

      # redirect /service/prometheus -> /service/prometheus/

      location ~ (.*/service/(prometheus|grafana))$ {
        return 301 ' $1/';
      }

      # console entry point

      location ~ (.*/)index.html {
        alias $base/index.html;
        sub_filter 'base href="/"' 'base href="$1"';
        # no-cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control $nocache;
        if_modified_since off;
        expires off;
        etag off;
      }

      # bookmarks / reloads in the /workloads/ path
      # (for our single page app, these should reload index.html but keep the path)

      location ~ (.*/)(workloads/.*) {
        alias $base/index.html;
        default_type text/html;
        sub_filter 'base href="/"' 'base href="$1"';
        # kill cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control $nocache;
        if_modified_since off;
        expires off;
        etag off;
      }

      # static files

      location ~ (.*)(/assets/.*) {
        alias $base$2;
      }

      location ~ (.*)(/.*) {
        root $base;
        index index.html;
        try_files $2 $1/index.html;
      }

    }

---
# Source: enterprise-suite-latest/templates/commercial-credentials.yaml

# Credentials generation was disabled.
# Use:
# kubectl -n lightbend create secret docker-registry \
#      commercial-credentials \
#      --docker-server=lightbend-docker-commercial-registry.bintray.io \
#      --docker-username=mybintrayuser \
#      --docker-password=mybintraytoken

