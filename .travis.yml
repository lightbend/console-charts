language: go
go:
  - "1.11.x"
sudo: required

services:
- docker

jobs:
  include:
  - stage: tests
    name: Windows Unit Tests
    os: windows
    filter_secrets: false
    install:
    - choco install python2
    script:
    - enterprise-suite/scripts/lbc_test.py

  - stage: tests
    name: Unit tests
    os: linux
    dist: xenial
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    script:
    - make test
    - travis_retry make -C enterprise-suite check-default-monitors-sync
 
  - name: Backend E2E Go Tests - Minikube
    os: linux
    dist: xenial
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    script:
    - travis_retry scripts/setup-minikube-for-linux.sh
    - travis_retry make -C enterprise-suite install-helm TILLER_NAMESPACE=console-backend-go-tests
    - travis_retry make -C enterprise-suite/gotests setup-tools
    - make -C enterprise-suite/gotests run-tests-minikube NAMESPACE=console-backend-go-tests
    # https://github.com/travis-ci/travis-ci/issues/6018 - Prevent truncated output.
    - sleep 5

  - name: Backend E2E Go Tests - Openshift
    os: linux
    dist: xenial
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    script:
    # travisqueue.go ensures only a single build runs at a time on Openshift
    - go run travisqueue.go
    - travis_retry scripts/setup-openshift.sh ${OC_GOTESTS_TOKEN2}
    - travis_retry make -C enterprise-suite/gotests setup-tools
    - make -C enterprise-suite/gotests purge-console-openshift NAMESPACE=console-backend-go-tests || true
    # travis_terminate early if tests fail - so we don't clean up, for easier debugging of failures
    - make -C enterprise-suite/gotests run-tests-openshift NAMESPACE=console-backend-go-tests || travis_terminate 1
    - make -C enterprise-suite/gotests purge-console-openshift NAMESPACE=console-backend-go-tests || true
    # https://github.com/travis-ci/travis-ci/issues/6018 - Prevent truncated output.
    - sleep 5

  - name: Frontend E2E Tests Subset 1 - Minikube
    os: linux
    dist: xenial
    cache:
      directories:
        - ~/.npm
        - ~/.cache
    node_js: 9.4.0
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    - travis_retry $(curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash)
    script:
    - travis_retry scripts/setup-minikube-for-linux.sh
    - make -C enterprise-suite frontend-tests1
    after_script:
      # Cypress videos.
      - artifacts upload $(find . -name '*.mp4')
      - artifacts upload $(find . -name '*.png')

  - name: Frontend E2E Tests Subset 2 - Minikube (Skip due to flaky)
    os: linux
    dist: xenial
    if: true = false # skip test due to flaky
    cache:
      directories:
        - ~/.npm
        - ~/.cache
    node_js: 9.4.0
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    - travis_retry $(curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash)
    script:
    - travis_retry scripts/setup-minikube-for-linux.sh
    - make -C enterprise-suite frontend-tests2
    after_script:
      # Cypress videos.
      - artifacts upload $(find . -name '*.mp4')
      - artifacts upload $(find . -name '*.png')

  - name: Frontend E2E Tests Subset 1 - Minikube Latest
    os: linux
    dist: xenial
    # Only build latest in the daily cron - don't block PRs or master releases.
    if: type in (cron)
    cache:
      directories:
        - ~/.npm
        - ~/.cache
    node_js: 9.4.0
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    - travis_retry $(curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash)
    script:
    - travis_retry scripts/setup-minikube-for-linux.sh
    - make -C enterprise-suite-latest frontend-tests1
    after_script:
      # Cypress videos.
      - artifacts upload $(find . -name '*.mp4')
      - artifacts upload $(find . -name '*.png')

  - name: Frontend E2E Tests Subset 2 - Minikube Latest (Skip due to flaky)
    os: linux
    dist: xenial
    # Only build latest in the daily cron - don't block PRs or master releases.
    if: type in (cron) AND true = false # skip test due to flaky
    cache:
      directories:
        - ~/.npm
        - ~/.cache
    node_js: 9.4.0
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    - travis_retry $(curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash)
    script:
    - travis_retry scripts/setup-minikube-for-linux.sh
    - make -C enterprise-suite-latest frontend-tests2
    after_script:
      # Cypress videos.
      - artifacts upload $(find . -name '*.mp4')
      - artifacts upload $(find . -name '*.png')

  - name: Reactive-sandbox test
    os: linux
    dist: xenial
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    script:
    - make test CHARTS=reactive-sandbox

  - name: Console Whitesource Report
    os: linux
    dist: xenial
    # Only deploy for pushes to master (and if manually invoked)
    if: type IN (push, api)
    install:
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    script:
    - travis_retry scripts/setup-minikube-for-linux.sh
    - travis_retry make -C enterprise-suite install-helm install-dev
    # update whitesource docker image CVE report based on installed docker images
    - travis_retry curl -sLJO https://github.com/whitesource/fs-agent-distribution/raw/master/standAlone/whitesource-fs-agent.jar
    - travis_retry java -jar whitesource-fs-agent.jar -apiKey ${WHITESOURCE_API_KEY} -c enterprise-suite/.ws.conf

  - stage: Deploy
    os: linux
    dist: xenial
    name: Deploy to GCS
    # Only deploy on tags
    if: type IN (push, api) AND tag is present
    install:
    # travisqueue.go ensures only a single deploy happens at a time
    - go run travisqueue.go
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    script:
    # Decrypt credentials for GCS system account helmchart@es-repo.iam.gserviceaccount.com
    - mkdir -p /tmp/resources || travis_terminate 1
    - openssl aes-256-cbc -K $encrypted_f01ffbb90c44_key -iv $encrypted_f01ffbb90c44_iv -in resources/es-repo-7c1fefe17951.json.enc -out /tmp/resources/es-repo-7c1fefe17951.json -d || travis_terminate 1
    - travis_retry scripts/deploy-to-gcs.sh
    - travis_retry scripts/trigger-build-helm-charts.sh

  - name: Deploy to Demo Environment
    os: linux
    dist: xenial
    # Only deploy on tags
    if: type in (push, api) AND tag is present
    install:
    # travisqueue.go ensures only a single build runs at a time on Openshift
    - go run travisqueue.go
    - travis_retry scripts/setup-tools-for-ubuntu.sh
    script:
    - travis_retry scripts/setup-openshift.sh ${OC_DEMO_TOKEN2}
    - TILLER_NAMESPACE=console-demo enterprise-suite/scripts/lbc.py install --namespace=console-demo --local-chart=enterprise-suite --set usePersistentStorage=yes

branches:
  only:
  - master
  # build tags starting with `enterprise-suite`, e.g. enterprise-suite-1.0.1
  - /^enterprise-suite-.+$/

notifications:
  email: false
  slack:
    rooms:
      secure: AHDrkFweHIHLOY5VFaxgfLQKlARY5b8wM/jN3XGoEzvpECQgFrgUN/KNGUmYDlWJkmxuzr4lNpVKZe6gUgYUBwGbOO7uhLjpcoPJSYj9T2dj1Dddh9hEReDlgP/VCyPKQoPSX/8/ZJF1yq1vSAXC9es1ek4dyJAcEyWmH5uYYM2jslxNm6J64XFAwZKSo2gU98jEMvbGFfjbfdlDIRQJlKmMTpJMxvWJLHZFmLMAXgK2SB3htrS4lasOh775vEqMc4fS/Cmecb/KsVnDcYHUCYT2SZpNzkde8uCTPgB5XdZZf3F7zo1HK7+3a7eygIbWtGTDk9AUisODZLAjPTRDRVDyjSt7pNKbDhipGrYvWgt397WbvlXiDZ8TeOkWJdTf2E7RM5odtJL5ZF0XklnqOQMu2b/ZXlMq4vZTYAbsof5+Nw3Fw00iqCBEUd9J9nvaoQX/86cySWfU1N/NlptIG5hY4ro3tsrvSuIkmyBM6XN3GUFp8OexeNcCtaW40XO0qnzpbYv4be7Be6yG6fPhewO+5pOIM4mL8V+ryORAzK29MIU0L+9/gChmTxZ4YmUbksYYp1ifUlAmSnJAZcMXIy2DhqrWs9pszLKeGC4dzOxmNNzWGYnL1l2X137wRC0mfKK84Bxs1RiaToxWUQO88FXffI8c8xF7m/+Zir6vMq8=
    on_success: change
    on_failure: always
    on_pull_requests: false
    template:
    - "Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of %{repository_slug}@%{branch} by %{author} %{result} in %{elapsed_time}"
