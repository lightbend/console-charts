version: 2.1

orbs:
  # https://circleci.com/orbs/registry/orb/eddiewebb/queue
  queue: eddiewebb/queue@1.1.3

jobs:
  unit_tests:
    docker:
    - image: circleci/buildpack-deps:stretch-curl

    steps:
    - checkout
    - run: scripts/setup-tools-for-debian.sh
    - run: make -C enterprise-suite test
    - run: make -C enterprise-suite check-default-monitors-sync
    - run: echo success!

  backend_e2e_openshift:
    docker:
    - image: circleci/golang:1.11

    environment:
      NAMESPACE: console-backend-go-tests

    working_directory: /go/src/github.com/lightbend/console-charts

    steps:
    - checkout
    - run: scripts/setup-tools-for-debian.sh
    - run: scripts/setup-openshift.sh ${OC_GOTESTS_TOKEN}
    - run: make -C enterprise-suite/gotests setup-tools
    - queue/until_front_of_line:
        consider-branch: false
    - run: make -C enterprise-suite/gotests purge-console-openshift NAMESPACE=${NAMESPACE}
    - run: make -C enterprise-suite/gotests run-tests-openshift NAMESPACE=${NAMESPACE}
    - run: make -C enterprise-suite/gotests purge-console-openshift NAMESPACE=${NAMESPACE}

  backend_e2e_minishift:
    machine:
      image: ubuntu-1604:201903-01

    environment:
      NAMESPACE: console-backend-go-tests
      GOPATH: /home/circleci/go

    working_directory: /home/circleci/go/src/github.com/lightbend/console-charts

    steps:
    - checkout
    - run: echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
    - run: echo $PATH
    - run: scripts/setup-tools-for-debian.sh
    - run: scripts/setup-minikube-for-linux.sh
    - run: make -C enterprise-suite install-helm TILLER_NAMESPACE=${NAMESPACE}
    - run: make -C enterprise-suite/gotests setup-tools
    - run: make -C enterprise-suite/gotests run-tests-minikube NAMESPACE=${NAMESPACE}

  frontend_e2e_minishift:
    machine:
      image: ubuntu-1604:201903-01

    steps:
    - checkout
    - run:
        name: Install node@9.4.0
        command: |
          set +e
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
          export NVM_DIR="/opt/circleci/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install v9.4.0
          nvm alias default v9.4.0
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
    - run: scripts/setup-tools-for-debian.sh
    - run: scripts/setup-minikube-for-linux.sh
    - run: curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash
    - run: make -C enterprise-suite frontend-tests1

    - store_artifacts:
        path: enterprise-suite/tests/e2e/cypress/videos

  whitesource:
    docker:
    - image: circleci/openjdk:8-jdk

    steps:
    - checkout
    - setup_remote_docker
    - run: scripts/setup-tools-for-debian.sh
    - run: scripts/pull-console-images.sh
    - run: curl -sLJO https://github.com/whitesource/fs-agent-distribution/raw/master/standAlone/whitesource-fs-agent.jar
    - run: java -version
    - run: java -jar whitesource-fs-agent.jar -apiKey ${WHITESOURCE_API_KEY} -c enterprise-suite/.ws.conf

  release:
    docker:
    - image: circleci/buildpack-deps:stretch-curl

    steps:
    - checkout
    - queue/until_front_of_line:
        consider-branch: false
    - run: scripts/setup-tools-for-debian.sh
    - run: scripts/set-chart-version.sh enterprise-suite ${CIRCLE_TAG#v}
    - run: make -C enterprise-suite package
    - run: mkdir -p /tmp/resources
    - run: gpg --batch --passphrase ${GCS_DEC_KEY} --output /tmp/resources/es-repo-7c1fefe17951.json --decrypt resources/es-repo-7c1fefe17951.json.enc
    - setup_remote_docker
    - run: scripts/deploy-to-gcs.sh
    - run: scripts/trigger-build-helm-charts.sh

  release_nightly:
    docker:
    - image: circleci/buildpack-deps:stretch-curl

    steps:
    - checkout
    - queue/until_front_of_line:
        consider-branch: false
    - run: scripts/setup-tools-for-debian.sh
    - run: scripts/set-chart-version.sh enterprise-suite $(scripts/get-nightly-version.sh)
    - run: make -C enterprise-suite package
    - run: mkdir -p /tmp/resources
    - run: gpg --batch --passphrase ${GCS_DEC_KEY} --output /tmp/resources/es-repo-7c1fefe17951.json --decrypt resources/es-repo-7c1fefe17951.json.enc
    - setup_remote_docker
    - run: GCS_BUCKET=lightbend-console-charts-nightly scripts/deploy-to-gcs.sh
    - run: scripts/trigger-build-helm-charts.sh

  deploy_demo:
    docker:
    - image: circleci/buildpack-deps:stretch-curl

    steps:
    - checkout
    - queue/until_front_of_line:
        consider-branch: false
    - run: scripts/setup-tools-for-debian.sh
    - run: scripts/set-chart-version.sh enterprise-suite ${CIRCLE_TAG#v}
    - run: make -C enterprise-suite package
    - run: scripts/setup-openshift.sh ${OC_DEMO_TOKEN}
    - run: TILLER_NAMESPACE=console-demo enterprise-suite/scripts/lbc.py install --namespace=console-demo --local-chart=build/enterprise-suite-${CIRCLE_TAG#v}.tgz --set usePersistentStorage=yes
    - run: scripts/deploy-chaos-apps.sh console-demo

workflows:
  version: 2
  build:
    jobs:
    - unit_tests

    # E2E Tests. Don't run on master, as they are too slow and cause excessive queuing. Will run on PRs only.
    - backend_e2e_openshift:
        requires:
        - unit_tests
        filters:
          branches:
            ignore: master
    - backend_e2e_minishift:
        requires:
        - unit_tests
        filters:
          branches:
            ignore: master
    - frontend_e2e_minishift:
        requires:
        - unit_tests
        filters:
          branches:
            ignore: master

    # Whitesource, release, and deploy happens on a tag only.
    - whitesource:
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /v.*/

    - release:
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /v.*/

    - deploy_demo:
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /v.*/

  nightly:
    triggers:
    - schedule:
        cron: "0 0 * * * "
        filters:
          branches:
            only: master

    jobs:
    - release_nightly
