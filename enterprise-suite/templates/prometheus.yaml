---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-server

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: {{.Release.Namespace}}

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: prometheus
    component: server
  name: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: server
  template:
    metadata:
      labels:
        app: prometheus
        component: server
      annotations:
        {{ .Values.prometheusDomain }}/scrape: "true"
        {{ .Values.prometheusDomain }}/port: "9090"
    spec:
      serviceAccountName: prometheus-server

      {{ if .Values.podUID }}
      securityContext:
        runAsUser: {{ .Values.podUID }}
      {{ end }}

      initContainers:
        - name: setup
          image: alpine
          resources:
            requests:
              cpu: {{ default .Values.defaultCPURequest }}
              memory: {{ default .Values.defaultMemoryRequest }}
          command:
            - /bin/sh
            - -c
          args:
            - mkdir -p /etc/config/rules;
              cp /etc/bare/prometheus.yml /etc/config/
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
            - mountPath: /etc/bare
              name: bare-prometheus

      containers:
        - name: es-monitor-api
          image: lightbend-docker-registry.bintray.io/enterprise-suite/es-monitor-api:{{ .Values.esMonitorVersion }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          resources:
            requests:
              cpu: {{ default .Values.defaultCPURequest .Values.esMonitorCPURequest }}
              memory: {{ default .Values.defaultMemoryRequest .Values.esMonitorMemoryRequest }}
          args:
            - --configPath=/etc/config/
            - --storagePath=/monitor-data/
            - --staticConfig=/etc/es-monitor-api/static-rules.yml
            - --bootstrapMonitorsFile=/etc/es-monitor-api/bootstrap-monitors.json
            - --prometheusTemplate=/etc/es-monitor-api/prometheus.yml
            - --prometheusDomain={{ .Values.prometheusDomain }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: es-monitor-api-volume
              mountPath: /etc/es-monitor-api
            - name: monitor-data-volume
              mountPath: /monitor-data
          ports:
            - containerPort: 8180
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8180
              scheme: HTTP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8180
              scheme: HTTP
            initialDelaySeconds: 30

        - name: prometheus-server
          image: prom/prometheus:{{ .Values.prometheusVersion }}
          resources:
            requests:
              cpu: {{ default .Values.defaultCPURequest .Values.prometheusCPURequest }}
              memory: {{ default .Values.defaultMemoryRequest .Values.prometheusMemoryRequest }}
          args:
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            timeoutSeconds: 30
            initialDelaySeconds: 30
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
            - name: prometheus-data-volume
              mountPath: /data

      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          emptyDir: {}
        - name: es-monitor-api-volume
          configMap:
            name: es-monitor-api
        - name: monitor-data-volume
          emptyDir: {}
        - name: prometheus-data-volume
          emptyDir: {}
        - name: bare-prometheus
          configMap:
            name: bare-prometheus

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
spec:
  ports:
    - port: 80
      targetPort: 9090
  selector:
    app: prometheus
    component: server

---
apiVersion: v1
kind: Service
metadata:
  name: es-monitor-api
spec:
  ports:
    - port: 80
      targetPort: 8180
  selector:
    app: prometheus
    component: server

{{ if .Values.minikube }}
---
apiVersion: v1
kind: Service
metadata:
  name: expose-prometheus
spec:
  ports:
  - port: 9090
    protocol: TCP
    targetPort: 9090
    nodePort: 30090
  selector:
    app: prometheus
    component: server
  type: NodePort
{{ end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: server
  name: bare-prometheus
data:
  prometheus.yml: |-
    # this is a placeholder to keep prometheus running while it waits the real config
    global:
      scrape_interval:     1m
      evaluation_interval: 1m
    scrape_configs:
      - job_name: wait
        static_configs:
          - targets: ['localhost:9090']
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: .+
          action: drop

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: server
  name: es-monitor-api
data:
{{ (.Files.Glob "es-monitor-api/*").AsConfig | indent 2 }}
