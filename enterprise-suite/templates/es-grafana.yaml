---
apiVersion: v1
kind: ConfigMap
metadata:
  name: exporter-graphs-cm
data:
{{ (.Files.Glob "es-grafana/*").AsConfig | indent 2 }}

# Job to add data-source to grafana
# 1. wait till grafana is up
# 2. add prometheus data source to grafana-server.
# Note: The IPaddress here is the address provided by minikube service list
# this IP address is not static, even for minikube
# Please note, browser should be able reach this IP-Address, it cannot be some internal IP address within kubernetes.
# like prometheus-server.lightbend will not work
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: grafana-datasource-cm
data:
  prometheus-datasource.json: |
      {
        "name": "Prometheus Lightbend",
        "type": "prometheus",
        "url": "{{ .Values.esMonitorBaseURL }}/service/prometheus/",
        "access": "direct",
        "basicAuth": false
      }

---
apiVersion: batch/v1
kind: Job
metadata:
  name: add-grafana-datasource
spec:
  template:
    spec:
      initContainers:
      - name: wait-grafana
        image: radial/busyboxplus:curl
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until curl -s http://grafana-server.lightbend:3000/login > /dev/null 2>&1 ; do echo waiting for grafana; sleep 2; done;']
      containers:
      - name: add-prometheus-datasource
        image: radial/busyboxplus:curl
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        workingDir: /mnt/grafana/dashboards
        args:
          - >
            for file in *-datasource.json ; do
              if [ -e "$file" ] ; then
                echo "importing $file" &&
                curl --silent --fail --show-error \
                  --request POST http://admin:admin@grafana-server.lightbend:3000/api/datasources \
                  --header "Content-Type: application/json" \
                  --header "Accept: application/json" \
                  --data-binary "@$file" >> /tmp/datasource 2>&1  ;
                echo "" ;
              fi
            done ;

        volumeMounts:
        - name: grafana-datasource
          mountPath: /mnt/grafana/dashboards
      restartPolicy: Never
      volumes:
      - name: grafana-datasource
        configMap:
          name: grafana-datasource-cm

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: grafana
    component: "server"
  name: grafana-server
spec:
  ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
    component: "server"
  type: "ClusterIP"

---
apiVersion: v1
kind: Service
metadata:
  name: expose-grafana
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
    nodePort: 30030
  selector:
    app: grafana
    component: server
  type: NodePort

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana-server
  labels:
    app: grafana
    component: server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
        component: server
    spec:
      containers:
      - image: lightbend-docker-registry.bintray.io/enterprise-suite/es-grafana:{{ .Values.esGrafanaVersion }}
        name: grafana-sever
        env:
          # The following env variables set up anonymous access to grafana with editor access.
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: "Editor"
          - name: GF_SERVER_ROOT_URL
            value: "{{ .Values.esMonitorBaseURL }}/service/grafana/"
          - name: GF_SERVER_ROUTER_LOGGING
            value: "true"
        ports:
          - containerPort: 3000
        readinessProbe:
          httpGet:
            path: /login
            port: 3000
        volumeMounts:
        - name: grafana-dashboards
          mountPath: /usr/share/grafana/public/conf
      volumes:
      - name: grafana-dashboards
        configMap:
          name: exporter-graphs-cm
