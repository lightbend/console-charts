---
apiVersion: v1
kind: ConfigMap
metadata:
  name: exporter-graphs-cm
data:
{{ (.Files.Glob "es-grafana/*").AsConfig | indent 2 }}

# Job to add data-source to grafana
# 1. wait till grafana is up
# 2. add prometheus data source to grafana-server.
# Note: The IPaddress here is the address provided by minikube service list
# this IP address is not static, even for minikube
# Please note, browser should be able reach this IP-Address, it cannot be some internal IP address within kubernetes.
# like prometheus-server.lightbend will not work
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: grafana-datasource-cm
data:
  prometheus-server-datasource.yaml: |
    # config file version
    apiVersion: 1

    # list of datasources to insert/update depending
    datasources:
      # <string, required> name of the datasource. Required
    - name: Cinnamon Prometheus
      # <string, required> datasource type. Required
      type: prometheus
      # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
      access: proxy
      # <int> org id. will default to orgId 1 if not specified
      orgId: 1
      # <string> url
      url: http://prometheus-server
      #
      basicAuth: false
      #
      isDefault: true
      editable: true

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: grafana
    component: "server"
  name: grafana-server
spec:
  ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
    component: "server"
  type: "ClusterIP"

{{ if .Values.minikube }}
---
apiVersion: v1
kind: Service
metadata:
  name: expose-grafana
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
    nodePort: 30030
  selector:
    app: grafana
    component: server
  type: NodePort
{{ end }}

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana-server
  labels:
    app: grafana
    component: server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
        component: server
    spec:
      {{ if .Values.podUID }}
      securityContext:
        runAsUser: {{ .Values.podUID }}
      {{ end }}
      containers:
      - image: lightbend-docker-registry.bintray.io/enterprise-suite/es-grafana:{{ .Values.esGrafanaVersion }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        name: grafana-server
        resources:
          requests:
            cpu: {{ default .Values.defaultCPURequest .Values.esGrafanaCPURequest }}
            memory: {{ default .Values.defaultMemoryRequest .Values.esGrafanaMemoryRequest }}
        env:
          # The following env variables set up anonymous access to grafana with editor access.
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: "Editor"
          - name: GF_SERVER_ROOT_URL
            value: "/service/grafana/"
          - name: GF_SERVER_ROUTER_LOGGING
            value: "true"
        ports:
          - containerPort: 3000
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "echo \"Waiting for grafana to enable cinnamon plugin...\"; until curl --output /dev/null --silent --head --fail curl http://127.0.0.1:3000; do echo -n '.' ;  sleep 2; done ; curl -XPOST 'admin:admin@127.0.0.1:3000/api/plugins/cinnamon-prometheus-app/settings?enabled=true' -d '' || true" ]
        readinessProbe:
          httpGet:
            path: /login
            port: 3000
        volumeMounts:
        - name: grafana-dashboards
          mountPath: /usr/share/grafana/public/conf
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources/
      volumes:
      - name: grafana-dashboards
        configMap:
          name: exporter-graphs-cm
      - name: grafana-datasources
        configMap:
          name: grafana-datasource-cm
