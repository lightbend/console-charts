kind: Deployment
apiVersion: {{ .Values.deploymentApiVersion }}
metadata:
  labels:
    app.kubernetes.io/name: {{ template "name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: console-backend
  name: console-backend
spec:
  replicas: 1

  strategy:
    # Always Recreate to ensure the PVs get released. It's not possible to have two replicas sharing a PV during deployment.
    type: Recreate
    # Needed for helm upgrade to succeed.
    rollingUpdate: null

  selector:
    matchLabels:
      app: prometheus
      component: server

  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "name" . }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: console-backend
        # Deprecated - these should be removed eventually. Kept to support upgrades with the old labels.
        app: prometheus
        component: server
      annotations:
        {{ .Values.prometheusDomain }}/scrape: "true"
        checksum/console-api-config: {{ (.Files.Glob "console-api/*").AsConfig | sha256sum }}
        checksum/bare-prometheus-config: {{ include (print $.Template.BasePath "/backend-configmap-bare-prometheus.yaml") . | sha256sum }}

    spec:
      serviceAccountName: prometheus-server

      securityContext:
      {{ if .Values.podUID }}
        runAsUser: {{ .Values.podUID }}
      {{ end }}

      initContainers:
        - name: setup
          image: {{ .Values.alpineImage }}:{{ .Values.alpineVersion }}
          resources:
            requests:
              cpu: {{ default .Values.defaultCPURequest }}
              memory: {{ default .Values.defaultMemoryRequest }}
          command:
            - /bin/sh
            - -c
          args:
            - mkdir -p /etc/config/rules;
              cp /etc/bare/prometheus.yml /etc/config/
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
            - mountPath: /etc/bare
              name: bare-prometheus

        # For vanilla K8s clusters, we need to match prometheus-data permissions to the prometheus user.
        # In prometheus 2.x, this is `65534`.
        # For Openshift the below will fail, but we can safely ignore it as Openshift remaps the user itself.
        - name: change-prometheus-data-volume-ownership
          image: {{ .Values.busyboxImage }}:{{ .Values.busyboxVersion }}
          command:
            - sh
            - -c
            - "chown -Rc 65534:65534 /data 2>/dev/null || true"
          volumeMounts:
            - name: prometheus-data-volume
              mountPath: /data
              subPath: prometheus-data

        {{ if .Values.enableElasticsearch -}}
        # Same as prometheus-data, but for elasticsearch-data.
        - name: elasticsearch-data-volume-ownership
          image: {{ .Values.busyboxImage }}:{{ .Values.busyboxVersion }}
          command:
            - sh
            - -c
            - "chown -Rc 1000:1000 /data 2>/dev/null || true"
          volumeMounts:
            - name: prometheus-data-volume
              mountPath: /data
              subPath: elasticsearch-data
        {{ end }}

      imagePullSecrets:
        - name: commercial-credentials

      containers:
        - name: console-api
          image: {{ tpl .Values.esMonitorImage . }}:{{ .Values.esMonitorVersion }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          resources:
            requests:
              cpu: {{ default .Values.defaultCPURequest .Values.esMonitorCPURequest }}
              memory: {{ default .Values.defaultMemoryRequest .Values.esMonitorMemoryRequest }}

          args:
            - --configPath=/etc/config/
            - --storagePath=/monitor-data/
            - --staticConfig=/etc/console-api-static-rules/static-rules.yml
            - --defaultMonitorsFile=/etc/console-api-default-monitors/default-monitors.json
            - --prometheusTemplate=/etc/console-api-prometheus/prometheus.yml
            - --prometheusDomain={{ .Values.prometheusDomain }}
            - --alertmanagers={{ .Values.alertManagers }}
            - --defaultMonitorWarmup={{ .Values.consoleAPI.defaultMonitorWarmup }}
            - --namespace=$(CONSOLE_NAMESPACE)

          env:
          - name: CONSOLE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace

          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: console-api-default-monitors-volume
              mountPath: /etc/console-api-default-monitors
            - name: console-api-static-rules-volume
              mountPath: /etc/console-api-static-rules
            - name: console-api-prometheus-volume
              mountPath: /etc/console-api-prometheus
            - name: prometheus-data-volume
              mountPath: /monitor-data
              subPath: monitor-data

          ports:
            - name: metrics
              containerPort: 8180

          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8180
              scheme: HTTP

          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8180
              scheme: HTTP
            initialDelaySeconds: 30

        - name: console-api-configmap-reload
          image: {{ .Values.configMapReloadImage }}:{{ .Values.configMapReloadVersion }}
          resources:
            requests:
              cpu: {{ default .Values.defaultCPURequest .Values.configmapReloadCPURequest }}
              memory: {{ default .Values.defaultMemoryRequest .Values.configmapReloadMemoryRequest }}
          args:
          - --volume-dir=/etc/console-api-default-monitors
          - --volume-dir=/etc/console-api-static-rules
          - --volume-dir=/etc/console-api-prometheus
          - --webhook-url=http://127.0.0.1:8180/reload
          volumeMounts:
          - name: console-api-default-monitors-volume
            mountPath: /etc/console-api-default-monitors
          - name: console-api-static-rules-volume
            mountPath: /etc/console-api-static-rules
          - name: console-api-prometheus-volume
            mountPath: /etc/console-api-prometheus

        - name: prometheus
          image: {{ .Values.prometheusImage }}:{{ .Values.prometheusVersion }}

          resources:
            requests:
              cpu: {{ default .Values.defaultCPURequest .Values.prometheusCPURequest }}
              memory: {{ default .Values.defaultMemoryRequest .Values.prometheusMemoryRequest }}

          args:
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
            {{ if .Values.esConsoleURL -}}
            - --web.external-url={{ .Values.esConsoleURL }}/service/prometheus
            - --web.route-prefix=/
            {{ end }}
          ports:
            - name: metrics
              containerPort: 9090

          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            timeoutSeconds: 30

          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            timeoutSeconds: 30
            initialDelaySeconds: 30

          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
            - name: prometheus-data-volume
              mountPath: /data
              subPath: prometheus-data

        {{ if .Values.enableElasticsearch -}}
        - name: elasticsearch
          image: {{ .Values.elasticsearchImage }}:{{ .Values.elasticsearchVersion }}

          env:
            - name: "discovery.type"
              value: "single-node"
            - name: "ES_JAVA_OPTS"
              value: "-Xms512m -Xmx512m"

          resources:
            requests:
              cpu: {{ default .Values.defaultCPURequest .Values.elasticsearchCPURequest }}
              memory: {{ default .Values.defaultMemoryRequest .Values.elasticsearchMemoryRequest }}
        
          ports:
            - name: elasticsearch
              containerPort: 9200

          readinessProbe:
            httpGet:
              path: /
              port: 9200
            timeoutSeconds: 30

          livenessProbe:
            httpGet:
              path: /
              port: 9200
            timeoutSeconds: 30
            initialDelaySeconds: 15

          volumeMounts:
            # Elasticseach data is kept in prometheus volume.
            # Openshift doesn't support mounting multiple volumes to a single pod and renaming the volume
            # would break backwards compatibility with older console versions.
            - name: prometheus-data-volume
              mountPath: /usr/share/elasticsearch/data
              subPath: elasticsearch-data
          {{ end }}
      terminationGracePeriodSeconds: 300

      volumes:
        # Used by console-api to write the final Prometheus configuration.
        - name: config-volume
          emptyDir: {}

        # Default monitors.
        - name: console-api-default-monitors-volume
          configMap:
            name: {{ .Values.consoleAPI.defaultMonitorsConfigMap}}

        # Static Prometheus rules.
        - name: console-api-static-rules-volume
          configMap:
            name: {{ .Values.consoleAPI.staticRulesConfigMap}}

        # Prometheus configuration template.
        - name: console-api-prometheus-volume
          configMap:
            name: console-api-prometheus

        # Prometheus data storage.
        - name: prometheus-data-volume
          {{ if .Values.usePersistentVolumes -}}
          persistentVolumeClaim:
            claimName: prometheus-storage
          {{ else -}}
          emptyDir: {}
          {{ end }}
        # Bootstrap files for prometheus.
        - name: bare-prometheus
          configMap:
            name: bare-prometheus
