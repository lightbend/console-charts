#!/bin/bash

## Test access to the console over kubectl port-forward setup

#set -x

source smokecommon

KUBECTL_PID=
export TMPPIPE=$(mktemp -t pipe.XXX)

cleanup() {
    if [ -n "$KUBECTL_PID" ] ; then
        kill $KUBECTL_PID
    fi
    if [ -n "$TMPPIPE" ] ; then
        rm -f $TMPPIPE
    fi
}

# Make sure we kill the port-forward when we are done
trap cleanup 0

export CONSOLE_REMOTE_PORT="8080"

# Fire up the port forwarding
(
    # Forwarding to an ephemeral port to avoid collisions
    kubectl port-forward -n ${NAMESPACE} deployment/es-console :$CONSOLE_REMOTE_PORT 1>$TMPPIPE &
    KUBECTL_PID=$!
    # This eliminates the annoying message from the outer shell when killing the process
    wait $KUBECTL_PID 2>/dev/null 1>&2
) &

PGID=$( ps -o pgid= -p $$ )

#
# wait for kubectl port-forward process
#
KUBECTL_PID=
port_forward_started() {
    KUBECTL_PID=$( ps -o pid= -o pgid= -o command= | sed -n "s/^ *\([0-9][0-9]*\) *$PGID kubectl port-forward.*/\1/p" )
    [[ ! -z "$KUBECTL_PID" ]]
}
busy_wait port_forward_started

[[ ! -z "$KUBECTL_PID" ]]
T $? kubectl port-forward started

#
# wait for kubectl port-forward output
#
CONSOLE_LOCAL_PORT=
port_forward_listening() {
    CONSOLE_LOCAL_PORT=$( sed -n -e "1s/^.*:\(.*\) ->.*/\1/p" -e "1q" <$TMPPIPE )
    [[ ! -z "$CONSOLE_LOCAL_PORT" ]]
}
busy_wait port_forward_listening
[[ ! -z "$CONSOLE_LOCAL_PORT" ]]
T $? kubectl port-forward listening

#
# wait for console to respond
#
busy_wait es_console_ready

# Test access
test_es_console_responding http://127.0.0.1:$CONSOLE_LOCAL_PORT

test_summary
