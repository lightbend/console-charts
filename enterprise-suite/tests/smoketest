#!/bin/bash

# Run all smoke tests with a filename of smoke_*.
# * Exit code indicates overall number of test failures.
# * Output is stored in separate logs, then only displayed on failures (in order)


usage () {
    echo "${0##*/} [-q] | [-h]"
    echo "  -q   Quiet.  Don't print debug info"
    echo "  -h   Print this help."
    exit 1
}

QUIET=0

while getopts qh option
do
    case "$option"
    in
        q) QUIET=1 ;;
        h) usage ;;
        *) usage ;;
    esac
done

FAILURES=0
pids=()

function print_debug() {
    if [ $QUIET -eq 0 ] ; then
        local pods=$(kubectl -n lightbend get pod --no-headers -o go-template='{{range .items}}{{.metadata.name}} {{end}}')
        echo
        echo "========================================"
        echo "Deployment details:"
        echo
        for pod in $pods; do
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            echo "Describe $pod:"
            echo
            kubectl -n lightbend describe pod "$pod"
            echo
            echo "Previous logs for $pod:"
            echo
            kubectl -n lightbend logs -p --all-containers "$pod"
            echo
            echo
            echo "Logs for $pod:"
            echo
            kubectl -n lightbend logs --all-containers "$pod"
            echo
        done
        echo
        echo "========================================"
        echo
    fi
}

print_debug

smoke_finished() {
    r=$1
    ((FAILURES+=$r))
    if [ "$r" == "0" ]; then
        echo "done"
    else
        echo "failed"
        cat /tmp/log-$smoketest
    fi
}

# This test has to be run on its own
smoketest=smoke_ingress
echo ==== Running $smoketest
./$smoketest 2>&1 > /tmp/log-$smoketest
smoke_finished $?

# The rest we run in parallel
for smoketest in smoke_*; do
    if [ "$smoketest" = "smoke_ingress" ] ; then
        continue
    fi

    echo ==== Running $smoketest

    ./$smoketest 2>&1 > /tmp/log-$smoketest &
    pids+=($!)
    smoketests+=($smoketest)
done

for (( n=0; n<${#pids[@]}; n++ )); do
    pid="${pids[$n]}"
    smoketest="${smoketests[$n]}"

    echo -n "Waiting for $smoketest to finish... "
    wait "$pid"
    smoke_finished $?
done
echo

echo "All tests completed with $FAILURES failures"

if [ "$FAILURES" != "0" ]; then
    print_debug
fi

exit $FAILURES
