#!/bin/bash

## Test access to the console over an ingress setup using TLS (SSL if you will)

# ariano: It's annoying that this and the non-TLS case (smoke_ingress) can't be combined into a single
# test.  I _could not_ figure out how to craft an Ingress config that would work.  Seems others
# have the same problem.  e.g. https://github.com/kubernetes/ingress-nginx/issues/1567
# I think you just have to create separate ingress resources.  (one with and and without tls spec)

# set -x

# need to deal with the secrets too

source smokecommon
if [[ "$TEST_CONTEXT" != "minikube" ]]; then exit 0; fi

TMPFILE=$(mktemp -t pipe.XXX)

cleanup() {
    if [ -n "$TMPFILE" ] ; then
        kubectl delete -f $TMPFILE > /dev/null
        rm -f $TMPFILE
    fi
    kubectl delete secret tls-minikube-ingress-test-tls -n ${NAMESPACE} 2>/dev/null 1>&2
}

# Make sure we delete the ingress resource
trap cleanup 0

# Allows us to know when the ingress changes are ready to go
# When ready, the describe ends with something like:
# Events:
#   Type    Reason  Age   From                      Message
#   ----    ------  ----  ----                      -------
#   Normal  CREATE  48s   nginx-ingress-controller  Ingress lightbend/ingress-test-tls
#   Normal  UPDATE  3s    nginx-ingress-controller  Ingress lightbend/ingress-test-tls
#
ingress_ready() {
    # ingress can take up to 1m to get ready
    kubectl describe ing/ingress-test-tls -n ${NAMESPACE} | awk 'END { exit !( $1 == "Normal"  &&  $2 == "UPDATE" ) }'
    status=$?
    sleep 2
    return $status
}

# Makes sure expose-es-console is ready
CONSOLE_NODE_BASE=$( busy_wait nodeport )

## Setup ingress
#
# Add required secret.  This created using:
# openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout tls.minikube.ingress.test.key -out tls.minikube.ingress.test.crt -days 3650 -subj "/CN=tls.minikube.ingress.test"
#
kubectl create secret tls tls-minikube-ingress-test-tls --key resources/tls.minikube.ingress.test.key --cert resources/tls.minikube.ingress.test.crt -n ${NAMESPACE} 2>/dev/null 1>&2

# Setup the Ingress resource
# ...probably a cool way to do this with -o go-template or yq
kubectl apply -n ${NAMESPACE} -f resources/ingress-test.tls.yaml

# Wait until the changes have been applied
busy_wait ingress_ready
busy_wait es_console_ready

#
##

# The more traditional way to do this would be to tweak DNS or /etc/hosts to point 'tls.minikube.ingress.test' to
# your minikube ip.  We don't want to mess with such things for this test so use the curl -H flag to achieve
# the equivalent.

# Test access over https
test_es_console_responding https://$( minikube ip )/es-console -H 'Host: tls.minikube.ingress.test' -k

test_summary
