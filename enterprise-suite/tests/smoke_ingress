#!/bin/bash

## Test access to the console over an ingress setup

source smokecommon

if [[ $TEST_CONTEXT != "minikube" ]]; then exit 0; fi

TMPPIPE=$(mktemp -t pipe.XXX)

cleanup() {
    if [ -n "$TMPPIPE" ] ; then
        kubectl delete -f $TMPPIPE > /dev/null
        rm -f $TMPPIPE
    fi
}

# Make sure we delete the ingress resource
trap cleanup 0

# Allows us to know when the ingress changes are ready to go
# When ready, the describe ends with something like:
# Events:
#   Type    Reason  Age   From                      Message
#   ----    ------  ----  ----                      -------
#   Normal  CREATE  48s   nginx-ingress-controller  Ingress lightbend/ingress-test
#   Normal  UPDATE  3s    nginx-ingress-controller  Ingress lightbend/ingress-test
#
ingress_ready() {
    # Debug
    # kubectl describe ing/ingress-test -n lightbend
    # ingress can take up to 1m to get ready
    kubectl describe ing/ingress-test -n ${NAMESPACE} | awk 'END { exit !( $1 == "Normal"  &&  $2 == "UPDATE" ) }'
    status=$?
    sleep 2
    return $status
}

# Makes sure expose-es-console is ready
CONSOLE_NODE_BASE=$( busy_wait nodeport )

# Setup ingress
kubectl apply -n ${NAMESPACE} -f resources/ingress-test.yaml

# Wait until the changes have been applied
busy_wait ingress_ready
busy_wait es_console_ready

# The more traditional way to do this would be to tweak DNS or /etc/hosts to point 'minikube.ingress.test' to
# your minikup ip.  We don't want to mess with such things for this test so use the curl -H flag to achieve
# the equivalent.

# Test access
test_es_console_responding http://$( minikube ip )/es-console -H 'Host: minikube.ingress.test'

test_summary
