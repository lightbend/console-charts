#!/bin/bash

## Test access to the console over an ingress setup

#set -x

source smokecommon
if [[ $CURRENT_CONTEXT == "minishift" ]]; then exit 0; fi

TMPDIR=$(mktemp -d)
INGRESS_YAML=$TMPDIR/ingress.yaml

cleanup() {
    if [ -n "$TMPDIR" ] ; then
        rm -rf $TMPDIR
    fi
    kubectl delete -n lightbend ingress ingress-test
    # Put things back
    ( cd .. ; make install-local )
}

# Make sure we delete the ingress resource and put the Console back the way it was
trap cleanup 0

# Path component used by ingress and configured into console bits.  Note it needs the trailing /
PATH_PREFIX=/ingress/path/

# Reinstall the Console with modified template values for the ingress setup.
VALUES_FILE=$TMPDIR/values.yaml
command -p echo "baseUrl: $PATH_PREFIX" >$VALUES_FILE
( cd .. ; HELM_VALUES_FILE=$VALUES_FILE make install-local )

# Allows us to know when the ingress changes are ready to go
# When ready, the describe ends with something like:
# Events:
#   Type    Reason  Age   From                      Message
#   ----    ------  ----  ----                      -------
#   Normal  CREATE  48s   nginx-ingress-controller  Ingress lightbend/ingress-test
#   Normal  UPDATE  3s    nginx-ingress-controller  Ingress lightbend/ingress-test
#
ingress_ready() {
    # Debug
    # kubectl describe ing/ingress-test -n lightbend
    # ingress can take up to 1m to get ready
    sleep 2
    kubectl describe ing/ingress-test -n lightbend | awk 'END { exit !( $1 == "Normal"  &&  $2 == "UPDATE" ) }'
}

# Makes sure expose-es-console is ready
CONSOLE_NODE_BASE=$( busy_wait nodeport expose-es-console )

CONSOLE_REMOTE_PORT=$( kubectl get -n lightbend services expose-es-console -o json | jq '.spec.ports[0].port' )

# Setup ingress
# ...probably a cool way to do this with -o go-template or with yq
sed -e "s/{{PORT}}/$CONSOLE_REMOTE_PORT/g" -e "s|{{PATH}}|$PATH_PREFIX|g" <resources/ingress-test.template.yaml >$INGRESS_YAML
kubectl apply -f $INGRESS_YAML > /dev/null

# Wait until the changes have been applied
busy_wait ingress_ready

# The more traditional way to do this would be to tweak DNS or /etc/hosts to point 'minikube.ingress.test' to
# your minikube ip.  We don't want to mess with such things for this test so use the curl -H flag to achieve
# the equivalent.

# Test access
CONSOLE_BASE=http://$( minikube ip )${PATH_PREFIX}

busy_wait test_es_console_responding ${CONSOLE_BASE}service/es-console -H 'Host: minikube.ingress.test'

# Base URLs for access to services via console through ingress
GRAFANA_VIA_CONSOLE=${CONSOLE_BASE}service/grafana
PROMETHEUS_VIA_CONSOLE=${CONSOLE_BASE}service/prometheus
ESMONITOR_VIA_CONSOLE=${CONSOLE_BASE}service/es-monitor-api

FLAGS=(-H "Host: minikube.ingress.test")
test_grafana_responding $GRAFANA_VIA_CONSOLE "${FLAGS[@]}"
test_prom_responding $PROMETHEUS_VIA_CONSOLE "${FLAGS[@]}"
test_es_monitor_API_responding $ESMONITOR_VIA_CONSOLE "${FLAGS[@]}"

test_summary
