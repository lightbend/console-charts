#################################################
# Console UI Configuration
#
consoleUIConfig:
  customer: ""

#################################################
# Update these versions for a release.
#
# lightbend-docker-commercial-registry.bintray.io/enterprise-suite/es-console
esConsoleVersion: v1.0.3
# lightbend-docker-commercial-registry.bintray.io/enterprise-suite/es-monitor-api
esMonitorVersion: v1.0.9
# lightbend-docker-commercial-registry.bintray.io/enterprise-suite/es-grafana
esGrafanaVersion: v0.2.1
# prom/prometheus
prometheusVersion: v2.7.1
# prom/alertmanager
alertManagerVersion: v0.16.0
# jimmidyson/configmap-reload
configMapReloadVersion: v0.2.2
# gcr.io/google_containers/kube-state-metrics
kubeStateMetricsVersion: v1.2.0
# lightbend/go-dnsmasq
goDnsmasqVersion: v0.1.7-1
# alpine
alpineVersion: "3.8"
# busybox
busyboxVersion: "1.30"

#################################################
# Image names to use. Combined with the versions above, gives the fully qualified docker image name.
#
# es-console image
esConsoleImage: '{{ .Values.imageCredentials.registry }}/enterprise-suite/es-console'
# es-monitor-api image
esMonitorImage: '{{ .Values.imageCredentials.registry }}/enterprise-suite/es-monitor-api'
# es-grafana image
esGrafanaImage: '{{ .Values.imageCredentials.registry }}/enterprise-suite/es-grafana'
# prometheus image
prometheusImage: prom/prometheus
# alertmanager image
alertManagerImage: prom/alertmanager
# configmap-reload image
configMapReloadImage: jimmidyson/configmap-reload
# kube-state-metrics image
kubeStateMetricsImage: gcr.io/google_containers/kube-state-metrics
# go-dnsmasq image
goDnsmasqImage: lightbend-docker-registry.bintray.io/lightbend/go-dnsmasq
# alpine image
alpineImage: alpine
# busybox image
busyboxImage: busybox

#################################################
# Kubernetes Api Versions
#
rbacApiVersion: rbac.authorization.k8s.io/v1
apiGroupVersion: rbac.authorization.k8s.io
deploymentApiVersion: apps/v1beta2
daemonSetApiVersion: apps/v1beta2

#################################################
# Resource Settings
#
# default image pull  policy
imagePullPolicy: IfNotPresent
# prometheus annotation domain, e.g. `domain/scrape=true`
prometheusDomain: prometheus.io
# Run pods as the given UID. There is no sensible default for this, so customers need to provide it.
podUID:
# Commercial image credentials - set `username` and `password` to install as Kubernetes Secret.
imageCredentials:
  registry: lightbend-docker-commercial-registry.bintray.io
#  username: setme
#  password: setme

# If true, an alertmanager will be deployed. Set to false and modify `alertManagers` list to use existing alertmanager(s).
createAlertManager: true

# Comma separated list of alertmanager addresses (can be k8s local DNS service names)
alertManagers: alertmanager:9093

# Alertmanager ConfigMap. Set to the name of a ConfigMap, with a file `alertmanager.yml`.
alertManagerConfigMap: alertmanager-default

# Service type for exposing Console outside the cluster. Can be "NodePort", "LoadBalancer" or "false".
exposeServices: false

# If exposeServices is set to "NodePort" or "LoadBalancer", Console will be exposed on this port.
esConsoleExposePort: 30080

# URL for external access to the console.  Optional.
# (Only used in alert-related links generated by prometheus and alertmanager at this point.)
# For example, if external access to the console via an ingress is
# available at http://console.mycorp.com:8080, then set
#esConsoleURL=http://console.mycorp.com:8080

#################################################
# ResourceRequests
#
# default container resource requests for CPU (0.1)
defaultCPURequest: 100m
# default container resource requests for memory
defaultMemoryRequest: 50Mi
# Prometheus resource request for memory
prometheusMemoryRequest: 250Mi

#################################################
# Persistent Volumes
#
# Set to true to use persistent volumes, otherwise emptyDir volumes are used.
usePersistentVolumes: true
# Default StorageClass to use for persistent volumes.  If unspecified, use the cluster's DefaultStorageClass.
#defaultStorageClass: standard
# Application-specific storage classes. If unspecified (and usePersistentVolumes is true), the application-specific
# PVCs will use the defaultStorageClass setting.
#prometheusStorageClass:
#esAlertmanagerStorageClass:
#esGrafanaStorageClass:

# Prometheus volume size - used for storing metrics data.
prometheusVolumeSize: 256Gi
# Alertmanager volume size - used for storing silences.
alertmanagerVolumeSize: 32Gi
# Grafana volume size - used for storing users, custom dashboards, and plugins.
esGrafanaVolumeSize: 32Gi

#################################################
# Grafana environment variables
#
# Any additional configuration for Grafana, using environment variables as specified at
# http://docs.grafana.org/installation/configuration/#using-environment-variables.
#
esGrafanaEnvVars:
#  for example...
#  GF_SMTP_ENABLED: true
#  GF_SMTP_HOST: smtp.gmail.com:465
#  GF_SMTP_USER: username
#  GF_SMTP_PASSWORD: password

#################################################
# Deprecated
#
# minikube debug resources - use exposeServices=NodePort instead
minikube: false
# (Ignored)  If true, the chart manages persistent volumes by creating PVCs. Set to false to not manage PVCs at all.
# Warning: If you "unmanage" PVCs that helm is managing by setting this to false, helm will delete those PVCs.
#managePersistentVolumes: true
